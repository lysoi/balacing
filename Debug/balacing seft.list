
balacing seft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080055e8  080055e8  000155e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005700  08005700  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005700  08005700  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005700  08005700  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000078  08005780  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08005780  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c987  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b22  00000000  00000000  0002ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002e550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  0002f1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179ed  00000000  00000000  0002fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db53  00000000  00000000  0004775d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9c3  00000000  00000000  000552b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfc73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000392c  00000000  00000000  000dfcc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080055cc 	.word	0x080055cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080055cc 	.word	0x080055cc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <PID>:
#include "PID.h"

int PID(float setpoint, float input){
 800114c:	b5b0      	push	{r4, r5, r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
	Kp = 1;
 8001156:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <PID+0x184>)
 8001158:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800115c:	601a      	str	r2, [r3, #0]
	Kd = 0;
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <PID+0x188>)
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
	Ki = 0.00;
 8001166:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <PID+0x18c>)
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
    dt = 0.0116;
 800116e:	4b5b      	ldr	r3, [pc, #364]	; (80012dc <PID+0x190>)
 8001170:	4a5b      	ldr	r2, [pc, #364]	; (80012e0 <PID+0x194>)
 8001172:	601a      	str	r2, [r3, #0]
	err = input - setpoint;
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f7ff fcf2 	bl	8000b60 <__aeabi_fsub>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <PID+0x198>)
 8001182:	601a      	str	r2, [r3, #0]

	if(err > 0)
 8001184:	4b57      	ldr	r3, [pc, #348]	; (80012e4 <PID+0x198>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f04f 0100 	mov.w	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ffad 	bl	80010ec <__aeabi_fcmpgt>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <PID+0x56>
		dir = -1;
 8001198:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <PID+0x19c>)
 800119a:	f04f 32ff 	mov.w	r2, #4294967295
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e002      	b.n	80011a8 <PID+0x5c>
	else
		dir = 1;
 80011a2:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <PID+0x19c>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
	P = Kp*(err );
 80011a8:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <PID+0x184>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <PID+0x198>)
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fdde 	bl	8000d74 <__aeabi_fmul>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <PID+0x1a0>)
 80011be:	601a      	str	r2, [r3, #0]
	I = 0.5*Ki*dt*(err + err_1);
 80011c0:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <PID+0x18c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f927 	bl	8000418 <__aeabi_f2d>
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <PID+0x1a4>)
 80011d0:	f7ff f97a 	bl	80004c8 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4614      	mov	r4, r2
 80011da:	461d      	mov	r5, r3
 80011dc:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <PID+0x190>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f919 	bl	8000418 <__aeabi_f2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4620      	mov	r0, r4
 80011ec:	4629      	mov	r1, r5
 80011ee:	f7ff f96b 	bl	80004c8 <__aeabi_dmul>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4614      	mov	r4, r2
 80011f8:	461d      	mov	r5, r3
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <PID+0x198>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <PID+0x1a8>)
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fcad 	bl	8000b64 <__addsf3>
 800120a:	4603      	mov	r3, r0
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f903 	bl	8000418 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff f955 	bl	80004c8 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fc47 	bl	8000ab8 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	4a32      	ldr	r2, [pc, #200]	; (80012f8 <PID+0x1ac>)
 800122e:	6013      	str	r3, [r2, #0]
	D = Kd/dt*(err - 2*err_1 + err_2);
 8001230:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <PID+0x188>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a29      	ldr	r2, [pc, #164]	; (80012dc <PID+0x190>)
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe4e 	bl	8000edc <__aeabi_fdiv>
 8001240:	4603      	mov	r3, r0
 8001242:	461d      	mov	r5, r3
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <PID+0x198>)
 8001246:	681c      	ldr	r4, [r3, #0]
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <PID+0x1a8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fc88 	bl	8000b64 <__addsf3>
 8001254:	4603      	mov	r3, r0
 8001256:	4619      	mov	r1, r3
 8001258:	4620      	mov	r0, r4
 800125a:	f7ff fc81 	bl	8000b60 <__aeabi_fsub>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <PID+0x1b0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f7ff fc7b 	bl	8000b64 <__addsf3>
 800126e:	4603      	mov	r3, r0
 8001270:	4619      	mov	r1, r3
 8001272:	4628      	mov	r0, r5
 8001274:	f7ff fd7e 	bl	8000d74 <__aeabi_fmul>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <PID+0x1b4>)
 800127e:	601a      	str	r2, [r3, #0]
	PID_value = + ( (int) P +(int) I+(int)D);
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <PID+0x1a0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff3b 	bl	8001100 <__aeabi_f2iz>
 800128a:	4604      	mov	r4, r0
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <PID+0x1ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff35 	bl	8001100 <__aeabi_f2iz>
 8001296:	4603      	mov	r3, r0
 8001298:	441c      	add	r4, r3
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <PID+0x1b4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff2e 	bl	8001100 <__aeabi_f2iz>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4423      	add	r3, r4
 80012a8:	4a16      	ldr	r2, [pc, #88]	; (8001304 <PID+0x1b8>)
 80012aa:	6013      	str	r3, [r2, #0]
    err_1 = err;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <PID+0x198>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <PID+0x1a8>)
 80012b2:	6013      	str	r3, [r2, #0]
    err_2 = err_1;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <PID+0x1a8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a10      	ldr	r2, [pc, #64]	; (80012fc <PID+0x1b0>)
 80012ba:	6013      	str	r3, [r2, #0]
    PID_value_pre = PID_value;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <PID+0x1b8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <PID+0x1bc>)
 80012c2:	6013      	str	r3, [r2, #0]
    return PID_value;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <PID+0x1b8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
//    if(PID_value>0)
//    return PID_value + 570;
//    else
//    return PID_value - 570;
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bdb0      	pop	{r4, r5, r7, pc}
 80012d0:	200000b8 	.word	0x200000b8
 80012d4:	200000a8 	.word	0x200000a8
 80012d8:	20000098 	.word	0x20000098
 80012dc:	200000bc 	.word	0x200000bc
 80012e0:	3c3e0ded 	.word	0x3c3e0ded
 80012e4:	200000a4 	.word	0x200000a4
 80012e8:	200000ac 	.word	0x200000ac
 80012ec:	200000c4 	.word	0x200000c4
 80012f0:	3fe00000 	.word	0x3fe00000
 80012f4:	2000009c 	.word	0x2000009c
 80012f8:	200000b4 	.word	0x200000b4
 80012fc:	200000c0 	.word	0x200000c0
 8001300:	20000094 	.word	0x20000094
 8001304:	200000a0 	.word	0x200000a0
 8001308:	200000b0 	.word	0x200000b0

0800130c <PWM_Control_1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PWM_Control_1(int duty){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

		if(duty > 0){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	dd0a      	ble.n	8001330 <PWM_Control_1+0x24>

		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	480f      	ldr	r0, [pc, #60]	; (800135c <PWM_Control_1+0x50>)
 8001320:	f001 f970 	bl	8002604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <PWM_Control_1+0x54>)
 800132a:	f001 f96b 	bl	8002604 <HAL_GPIO_WritePin>
 800132e:	e00c      	b.n	800134a <PWM_Control_1+0x3e>

		}
		else{
		  duty = -duty;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	425b      	negs	r3, r3
 8001334:	607b      	str	r3, [r7, #4]
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <PWM_Control_1+0x50>)
 800133c:	f001 f962 	bl	8002604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2101      	movs	r1, #1
 8001344:	4806      	ldr	r0, [pc, #24]	; (8001360 <PWM_Control_1+0x54>)
 8001346:	f001 f95d 	bl	8002604 <HAL_GPIO_WritePin>
		}

		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <PWM_Control_1+0x58>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	635a      	str	r2, [r3, #52]	; 0x34
		 // HAL_UART_Transmit(&huart1,duty, 7, 1000);

	}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40010800 	.word	0x40010800
 8001360:	40010c00 	.word	0x40010c00
 8001364:	20000138 	.word	0x20000138

08001368 <PWM_Control_2>:

	void PWM_Control_2(int duty){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
		if(duty > 0){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	dd0c      	ble.n	8001390 <PWM_Control_2+0x28>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800137c:	4810      	ldr	r0, [pc, #64]	; (80013c0 <PWM_Control_2+0x58>)
 800137e:	f001 f941 	bl	8002604 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <PWM_Control_2+0x58>)
 800138a:	f001 f93b 	bl	8002604 <HAL_GPIO_WritePin>
 800138e:	e00e      	b.n	80013ae <PWM_Control_2+0x46>

		}
		else{
	      duty = -duty;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	425b      	negs	r3, r3
 8001394:	607b      	str	r3, [r7, #4]
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139c:	4808      	ldr	r0, [pc, #32]	; (80013c0 <PWM_Control_2+0x58>)
 800139e:	f001 f931 	bl	8002604 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <PWM_Control_2+0x58>)
 80013aa:	f001 f92b 	bl	8002604 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty);
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <PWM_Control_2+0x5c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38


	}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40010800 	.word	0x40010800
 80013c4:	20000138 	.word	0x20000138

080013c8 <HAL_TIM_PeriodElapsedCallback>:

	  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	  {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	      if (htim->Instance==TIM2) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d8:	d10b      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x2a>
	    	 // pre_com_angle = com_angle; // đạo hàm, lúc trước khi lấy mẫu cái hiện tại đã thành cái mới
	    	  process_MPU();
 80013da:	f000 fb65 	bl	8001aa8 <process_MPU>

	    	  duty = PID(0,com_angle);
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 0000 	mov.w	r0, #0
 80013e8:	f7ff feb0 	bl	800114c <PID>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80013f0:	6013      	str	r3, [r2, #0]
	    	  //duty_1 = PID_1(0,com_angle);
	      }
	  }
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000c8 	.word	0x200000c8
 8001400:	20000000 	.word	0x20000000

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001408:	f000 fe08 	bl	800201c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f822 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001410:	f000 f90a 	bl	8001628 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001414:	f000 f85a 	bl	80014cc <MX_I2C1_Init>
  MX_TIM2_Init();
 8001418:	f000 f886 	bl	8001528 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <main+0x48>)
 800141e:	f002 fe5b 	bl	80040d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001422:	2100      	movs	r1, #0
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <main+0x48>)
 8001426:	f002 ff01 	bl	800422c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 800142a:	2104      	movs	r1, #4
 800142c:	4807      	ldr	r0, [pc, #28]	; (800144c <main+0x48>)
 800142e:	f002 fefd 	bl	800422c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_MPU();
 8001432:	f000 faa9 	bl	8001988 <init_MPU>
  while (1)
  {
    /* USER CODE END WHILE */
	  PWM_Control_1(duty);
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <main+0x4c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff66 	bl	800130c <PWM_Control_1>
	  PWM_Control_2(duty);
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <main+0x4c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff8f 	bl	8001368 <PWM_Control_2>
	  PWM_Control_1(duty);
 800144a:	e7f4      	b.n	8001436 <main+0x32>
 800144c:	20000138 	.word	0x20000138
 8001450:	20000000 	.word	0x20000000

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b090      	sub	sp, #64	; 0x40
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	2228      	movs	r2, #40	; 0x28
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fd70 	bl	8004f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147a:	2301      	movs	r3, #1
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800147e:	2310      	movs	r3, #16
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001482:	2300      	movs	r3, #0
 8001484:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001486:	f107 0318 	add.w	r3, r7, #24
 800148a:	4618      	mov	r0, r3
 800148c:	f002 f9ce 	bl	800382c <HAL_RCC_OscConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001496:	f000 f93f 	bl	8001718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149a:	230f      	movs	r3, #15
 800149c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fc3a 	bl	8003d2c <HAL_RCC_ClockConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014be:	f000 f92b 	bl	8001718 <Error_Handler>
  }
}
 80014c2:	bf00      	nop
 80014c4:	3740      	adds	r7, #64	; 0x40
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_I2C1_Init+0x50>)
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <MX_I2C1_Init+0x54>)
 80014d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_I2C1_Init+0x50>)
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_I2C1_Init+0x58>)
 80014da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_I2C1_Init+0x50>)
 80014ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_I2C1_Init+0x50>)
 800150a:	f001 f893 	bl	8002634 <HAL_I2C_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001514:	f000 f900 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200000cc 	.word	0x200000cc
 8001520:	40005400 	.word	0x40005400
 8001524:	000186a0 	.word	0x000186a0

08001528 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08e      	sub	sp, #56	; 0x38
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	f107 0320 	add.w	r3, r7, #32
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
 8001554:	615a      	str	r2, [r3, #20]
 8001556:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001558:	4b32      	ldr	r3, [pc, #200]	; (8001624 <MX_TIM2_Init+0xfc>)
 800155a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8001560:	4b30      	ldr	r3, [pc, #192]	; (8001624 <MX_TIM2_Init+0xfc>)
 8001562:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001566:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <MX_TIM2_Init+0xfc>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <MX_TIM2_Init+0xfc>)
 8001570:	2209      	movs	r2, #9
 8001572:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001574:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <MX_TIM2_Init+0xfc>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <MX_TIM2_Init+0xfc>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001580:	4828      	ldr	r0, [pc, #160]	; (8001624 <MX_TIM2_Init+0xfc>)
 8001582:	f002 fd59 	bl	8004038 <HAL_TIM_Base_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800158c:	f000 f8c4 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159a:	4619      	mov	r1, r3
 800159c:	4821      	ldr	r0, [pc, #132]	; (8001624 <MX_TIM2_Init+0xfc>)
 800159e:	f003 f8ad 	bl	80046fc <HAL_TIM_ConfigClockSource>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015a8:	f000 f8b6 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ac:	481d      	ldr	r0, [pc, #116]	; (8001624 <MX_TIM2_Init+0xfc>)
 80015ae:	f002 fde5 	bl	800417c <HAL_TIM_PWM_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80015b8:	f000 f8ae 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	4619      	mov	r1, r3
 80015ca:	4816      	ldr	r0, [pc, #88]	; (8001624 <MX_TIM2_Init+0xfc>)
 80015cc:	f003 fc22 	bl	8004e14 <HAL_TIMEx_MasterConfigSynchronization>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015d6:	f000 f89f 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015da:	2360      	movs	r3, #96	; 0x60
 80015dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	4619      	mov	r1, r3
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <MX_TIM2_Init+0xfc>)
 80015f2:	f002 ffc5 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015fc:	f000 f88c 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2204      	movs	r2, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4807      	ldr	r0, [pc, #28]	; (8001624 <MX_TIM2_Init+0xfc>)
 8001608:	f002 ffba 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001612:	f000 f881 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001616:	4803      	ldr	r0, [pc, #12]	; (8001624 <MX_TIM2_Init+0xfc>)
 8001618:	f000 fc72 	bl	8001f00 <HAL_TIM_MspPostInit>

}
 800161c:	bf00      	nop
 800161e:	3738      	adds	r7, #56	; 0x38
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000138 	.word	0x20000138

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <MX_GPIO_Init+0xe0>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a31      	ldr	r2, [pc, #196]	; (8001708 <MX_GPIO_Init+0xe0>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <MX_GPIO_Init+0xe0>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <MX_GPIO_Init+0xe0>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a2b      	ldr	r2, [pc, #172]	; (8001708 <MX_GPIO_Init+0xe0>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <MX_GPIO_Init+0xe0>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <MX_GPIO_Init+0xe0>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a25      	ldr	r2, [pc, #148]	; (8001708 <MX_GPIO_Init+0xe0>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b23      	ldr	r3, [pc, #140]	; (8001708 <MX_GPIO_Init+0xe0>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800168a:	4820      	ldr	r0, [pc, #128]	; (800170c <MX_GPIO_Init+0xe4>)
 800168c:	f000 ffba 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 8001696:	481e      	ldr	r0, [pc, #120]	; (8001710 <MX_GPIO_Init+0xe8>)
 8001698:	f000 ffb4 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2101      	movs	r1, #1
 80016a0:	481c      	ldr	r0, [pc, #112]	; (8001714 <MX_GPIO_Init+0xec>)
 80016a2:	f000 ffaf 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2302      	movs	r3, #2
 80016b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	4619      	mov	r1, r3
 80016be:	4813      	ldr	r0, [pc, #76]	; (800170c <MX_GPIO_Init+0xe4>)
 80016c0:	f000 fe1c 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 80016c4:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 80016c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4619      	mov	r1, r3
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <MX_GPIO_Init+0xe8>)
 80016de:	f000 fe0d 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016e2:	2301      	movs	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4619      	mov	r1, r3
 80016f8:	4806      	ldr	r0, [pc, #24]	; (8001714 <MX_GPIO_Init+0xec>)
 80016fa:	f000 fdff 	bl	80022fc <HAL_GPIO_Init>

}
 80016fe:	bf00      	nop
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	40011000 	.word	0x40011000
 8001710:	40010800 	.word	0x40010800
 8001714:	40010c00 	.word	0x40010c00

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
 8001722:	0000      	movs	r0, r0
 8001724:	0000      	movs	r0, r0
	...

08001728 <ftoa>:
	0.000000005,		// 8
	0.0000000005,		// 9
	0.00000000005		// 10
};
char * ftoa(double f, char * buf, int precision)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2b0a      	cmp	r3, #10
 8001742:	dd01      	ble.n	8001748 <ftoa+0x20>
		precision = MAX_PRECISION;
 8001744:	230a      	movs	r3, #10
 8001746:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001754:	f7ff f92a 	bl	80009ac <__aeabi_dcmplt>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00a      	beq.n	8001774 <ftoa+0x4c>
	{
		f = -f;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001768:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	627a      	str	r2, [r7, #36]	; 0x24
 8001770:	222d      	movs	r2, #45	; 0x2d
 8001772:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	da4f      	bge.n	800181a <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <ftoa+0x248>)
 8001780:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001784:	f7ff f912 	bl	80009ac <__aeabi_dcmplt>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <ftoa+0x6c>
 800178e:	2306      	movs	r3, #6
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	e042      	b.n	800181a <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b76      	ldr	r3, [pc, #472]	; (8001974 <ftoa+0x24c>)
 800179a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800179e:	f7ff f905 	bl	80009ac <__aeabi_dcmplt>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <ftoa+0x86>
 80017a8:	2305      	movs	r3, #5
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	e035      	b.n	800181a <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4b71      	ldr	r3, [pc, #452]	; (8001978 <ftoa+0x250>)
 80017b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017b8:	f7ff f8f8 	bl	80009ac <__aeabi_dcmplt>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <ftoa+0xa0>
 80017c2:	2304      	movs	r3, #4
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	e028      	b.n	800181a <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	4b6b      	ldr	r3, [pc, #428]	; (800197c <ftoa+0x254>)
 80017ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017d2:	f7ff f8eb 	bl	80009ac <__aeabi_dcmplt>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <ftoa+0xba>
 80017dc:	2303      	movs	r3, #3
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	e01b      	b.n	800181a <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 80017e2:	a35f      	add	r3, pc, #380	; (adr r3, 8001960 <ftoa+0x238>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017ec:	f7ff f8de 	bl	80009ac <__aeabi_dcmplt>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <ftoa+0xd4>
 80017f6:	2302      	movs	r3, #2
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	e00e      	b.n	800181a <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 80017fc:	a35a      	add	r3, pc, #360	; (adr r3, 8001968 <ftoa+0x240>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001806:	f7ff f8d1 	bl	80009ac <__aeabi_dcmplt>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <ftoa+0xee>
 8001810:	2301      	movs	r3, #1
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	e001      	b.n	800181a <ftoa+0xf2>
		else precision = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00d      	beq.n	800183c <ftoa+0x114>
		f += rounders[precision];
 8001820:	4a57      	ldr	r2, [pc, #348]	; (8001980 <ftoa+0x258>)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001830:	f7fe fc94 	bl	800015c <__adddf3>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// integer part...
	intPart = f;
 800183c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001840:	f7ff f8f2 	bl	8000a28 <__aeabi_d2iz>
 8001844:	4603      	mov	r3, r0
 8001846:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8001848:	69f8      	ldr	r0, [r7, #28]
 800184a:	f7fe fdd3 	bl	80003f4 <__aeabi_i2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001856:	f7fe fc7f 	bl	8000158 <__aeabi_dsub>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!intPart)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d105      	bne.n	8001874 <ftoa+0x14c>
		*ptr++ = '0';
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	627a      	str	r2, [r7, #36]	; 0x24
 800186e:	2230      	movs	r2, #48	; 0x30
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e038      	b.n	80018e6 <ftoa+0x1be>
	else
	{
		// save start pointer
		p = ptr;
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 8001878:	e01a      	b.n	80018b0 <ftoa+0x188>
		{
			*p++ = '0' + intPart % 10;
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	4b41      	ldr	r3, [pc, #260]	; (8001984 <ftoa+0x25c>)
 800187e:	fb83 1302 	smull	r1, r3, r3, r2
 8001882:	1099      	asrs	r1, r3, #2
 8001884:	17d3      	asrs	r3, r2, #31
 8001886:	1ac9      	subs	r1, r1, r3
 8001888:	460b      	mov	r3, r1
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	1ad1      	subs	r1, r2, r3
 8001892:	b2ca      	uxtb	r2, r1
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	1c59      	adds	r1, r3, #1
 8001898:	6239      	str	r1, [r7, #32]
 800189a:	3230      	adds	r2, #48	; 0x30
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	4a38      	ldr	r2, [pc, #224]	; (8001984 <ftoa+0x25c>)
 80018a4:	fb82 1203 	smull	r1, r2, r2, r3
 80018a8:	1092      	asrs	r2, r2, #2
 80018aa:	17db      	asrs	r3, r3, #31
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	61fb      	str	r3, [r7, #28]
		while (intPart)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1e1      	bne.n	800187a <ftoa+0x152>
		}

		// save end pos
		p1 = p;
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 80018ba:	e00e      	b.n	80018da <ftoa+0x1b2>
		{
			c = *--p;
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	3b01      	subs	r3, #1
 80018c0:	623b      	str	r3, [r7, #32]
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	627a      	str	r2, [r7, #36]	; 0x24
 80018d6:	7dfa      	ldrb	r2, [r7, #23]
 80018d8:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 80018da:	6a3a      	ldr	r2, [r7, #32]
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	429a      	cmp	r2, r3
 80018e0:	d8ec      	bhi.n	80018bc <ftoa+0x194>
		}

		// restore end pos
		ptr = p1;
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d030      	beq.n	800194e <ftoa+0x226>
	{
		// place decimal point
		*ptr++ = '.';
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	627a      	str	r2, [r7, #36]	; 0x24
 80018f2:	222e      	movs	r2, #46	; 0x2e
 80018f4:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 80018f6:	e025      	b.n	8001944 <ftoa+0x21c>
		{
			f *= 10.0;
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <ftoa+0x24c>)
 80018fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001902:	f7fe fde1 	bl	80004c8 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	e9c7 2302 	strd	r2, r3, [r7, #8]
			c = f;
 800190e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001912:	f7ff f8b1 	bl	8000a78 <__aeabi_d2uiz>
 8001916:	4603      	mov	r3, r0
 8001918:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	627a      	str	r2, [r7, #36]	; 0x24
 8001920:	7dfa      	ldrb	r2, [r7, #23]
 8001922:	3230      	adds	r2, #48	; 0x30
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]
			f -= c;
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fd62 	bl	80003f4 <__aeabi_i2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001938:	f7fe fc0e 	bl	8000158 <__aeabi_dsub>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (precision--)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	1e5a      	subs	r2, r3, #1
 8001948:	603a      	str	r2, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1d4      	bne.n	80018f8 <ftoa+0x1d0>
		}
	}

	// terminating zero
	*ptr = 0;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]

	return buf;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	00000000 	.word	0x00000000
 8001964:	40c38800 	.word	0x40c38800
 8001968:	00000000 	.word	0x00000000
 800196c:	40f86a00 	.word	0x40f86a00
 8001970:	3ff00000 	.word	0x3ff00000
 8001974:	40240000 	.word	0x40240000
 8001978:	40590000 	.word	0x40590000
 800197c:	408f4000 	.word	0x408f4000
 8001980:	08005620 	.word	0x08005620
 8001984:	66666667 	.word	0x66666667

08001988 <init_MPU>:

char init_MPU(){
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af02      	add	r7, sp, #8
    char status = 1;
 800198e:	2301      	movs	r3, #1
 8001990:	77fb      	strb	r3, [r7, #31]
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 8001992:	23d0      	movs	r3, #208	; 0xd0
 8001994:	77bb      	strb	r3, [r7, #30]

    char rx_data[25];
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 1000) != HAL_OK) {
 8001996:	7fbb      	ldrb	r3, [r7, #30]
 8001998:	b299      	uxth	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	2203      	movs	r2, #3
 80019a0:	483d      	ldr	r0, [pc, #244]	; (8001a98 <init_MPU+0x110>)
 80019a2:	f001 fae9 	bl	8002f78 <HAL_I2C_IsDeviceReady>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d007      	beq.n	80019bc <init_MPU+0x34>
    	strcpy( rx_data, "No Device \r \n");
 80019ac:	463b      	mov	r3, r7
 80019ae:	4a3b      	ldr	r2, [pc, #236]	; (8001a9c <init_MPU+0x114>)
 80019b0:	461c      	mov	r4, r3
 80019b2:	4613      	mov	r3, r2
 80019b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019b6:	c407      	stmia	r4!, {r0, r1, r2}
 80019b8:	8023      	strh	r3, [r4, #0]
 80019ba:	e007      	b.n	80019cc <init_MPU+0x44>
      }
      else{
    	  strcpy( rx_data, "Device found \r \n");
 80019bc:	463b      	mov	r3, r7
 80019be:	4a38      	ldr	r2, [pc, #224]	; (8001aa0 <init_MPU+0x118>)
 80019c0:	461c      	mov	r4, r3
 80019c2:	4615      	mov	r5, r2
 80019c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c8:	682b      	ldr	r3, [r5, #0]
 80019ca:	7023      	strb	r3, [r4, #0]
      }
   // HAL_UART_Transmit(&huart1, (uint8_t *)&rx_data, 25, 100);
	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 80019cc:	236b      	movs	r3, #107	; 0x6b
 80019ce:	773b      	strb	r3, [r7, #28]
    d[1] = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	777b      	strb	r3, [r7, #29]
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 80019d4:	7fbb      	ldrb	r3, [r7, #30]
 80019d6:	b299      	uxth	r1, r3
 80019d8:	f107 021c 	add.w	r2, r7, #28
 80019dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2302      	movs	r3, #2
 80019e4:	482c      	ldr	r0, [pc, #176]	; (8001a98 <init_MPU+0x110>)
 80019e6:	f000 ff69 	bl	80028bc <HAL_I2C_Master_Transmit>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <init_MPU+0x6c>
	{
		status = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	77fb      	strb	r3, [r7, #31]
	}
	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
 80019f4:	2319      	movs	r3, #25
 80019f6:	773b      	strb	r3, [r7, #28]
	d[1] = sample_1khz;
 80019f8:	2307      	movs	r3, #7
 80019fa:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80019fc:	bf00      	nop
 80019fe:	7fbb      	ldrb	r3, [r7, #30]
 8001a00:	b299      	uxth	r1, r3
 8001a02:	f107 021c 	add.w	r2, r7, #28
 8001a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	4822      	ldr	r0, [pc, #136]	; (8001a98 <init_MPU+0x110>)
 8001a10:	f000 ff54 	bl	80028bc <HAL_I2C_Master_Transmit>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f1      	bne.n	80019fe <init_MPU+0x76>

	d[0] = GYRO_CONFIG;
 8001a1a:	231b      	movs	r3, #27
 8001a1c:	773b      	strb	r3, [r7, #28]
	d[1] = gyro_con;
 8001a1e:	2318      	movs	r3, #24
 8001a20:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001a22:	bf00      	nop
 8001a24:	7fbb      	ldrb	r3, [r7, #30]
 8001a26:	b299      	uxth	r1, r3
 8001a28:	f107 021c 	add.w	r2, r7, #28
 8001a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2302      	movs	r3, #2
 8001a34:	4818      	ldr	r0, [pc, #96]	; (8001a98 <init_MPU+0x110>)
 8001a36:	f000 ff41 	bl	80028bc <HAL_I2C_Master_Transmit>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f1      	bne.n	8001a24 <init_MPU+0x9c>

	d[0] = ACCEL_CONFIG;
 8001a40:	231c      	movs	r3, #28
 8001a42:	773b      	strb	r3, [r7, #28]
	d[1] = 0x00;
 8001a44:	2300      	movs	r3, #0
 8001a46:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001a48:	bf00      	nop
 8001a4a:	7fbb      	ldrb	r3, [r7, #30]
 8001a4c:	b299      	uxth	r1, r3
 8001a4e:	f107 021c 	add.w	r2, r7, #28
 8001a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2302      	movs	r3, #2
 8001a5a:	480f      	ldr	r0, [pc, #60]	; (8001a98 <init_MPU+0x110>)
 8001a5c:	f000 ff2e 	bl	80028bc <HAL_I2C_Master_Transmit>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f1      	bne.n	8001a4a <init_MPU+0xc2>

	d[0] = INIT_ENB;
 8001a66:	2338      	movs	r3, #56	; 0x38
 8001a68:	773b      	strb	r3, [r7, #28]
	d[1] = inter;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001a6e:	bf00      	nop
 8001a70:	7fbb      	ldrb	r3, [r7, #30]
 8001a72:	b299      	uxth	r1, r3
 8001a74:	f107 021c 	add.w	r2, r7, #28
 8001a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2302      	movs	r3, #2
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <init_MPU+0x110>)
 8001a82:	f000 ff1b 	bl	80028bc <HAL_I2C_Master_Transmit>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f1      	bne.n	8001a70 <init_MPU+0xe8>

  return status;
 8001a8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bdb0      	pop	{r4, r5, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200000cc 	.word	0x200000cc
 8001a9c:	080055e8 	.word	0x080055e8
 8001aa0:	080055f8 	.word	0x080055f8
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <process_MPU>:
	raw.Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
	raw.Temperature = (float)(temp)/340.0 + (float)36.5;
    return raw;
}

void process_MPU(){
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	b09b      	sub	sp, #108	; 0x6c
 8001aac:	af02      	add	r7, sp, #8
	mpu_data_processed data1;
	float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,roll,pitch,roll_com;

	uint8_t data[13];
	uint8_t reg = ACCEL_XOUT_H;
 8001aae:	233b      	movs	r3, #59	; 0x3b
 8001ab0:	72fb      	strb	r3, [r7, #11]
	uint8_t device_address = MPU_ADDRESS;
 8001ab2:	23d0      	movs	r3, #208	; 0xd0
 8001ab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8001ab8:	bf00      	nop
 8001aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001abe:	b299      	uxth	r1, r3
 8001ac0:	f107 020b 	add.w	r2, r7, #11
 8001ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	4892      	ldr	r0, [pc, #584]	; (8001d18 <process_MPU+0x270>)
 8001ace:	f000 fef5 	bl	80028bc <HAL_I2C_Master_Transmit>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f0      	bne.n	8001aba <process_MPU+0x12>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8001ad8:	bf00      	nop
 8001ada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ade:	b299      	uxth	r1, r3
 8001ae0:	f107 020c 	add.w	r2, r7, #12
 8001ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	230e      	movs	r3, #14
 8001aec:	488a      	ldr	r0, [pc, #552]	; (8001d18 <process_MPU+0x270>)
 8001aee:	f000 ffe3 	bl	8002ab8 <HAL_I2C_Master_Receive>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <process_MPU+0x32>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8001af8:	7b3b      	ldrb	r3, [r7, #12]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	7b7b      	ldrb	r3, [r7, #13]
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f8e0 	bl	8000ccc <__aeabi_i2f>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	65bb      	str	r3, [r7, #88]	; 0x58
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8001b10:	7bbb      	ldrb	r3, [r7, #14]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff f8d4 	bl	8000ccc <__aeabi_i2f>
 8001b24:	4603      	mov	r3, r0
 8001b26:	657b      	str	r3, [r7, #84]	; 0x54
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 8001b28:	7c3b      	ldrb	r3, [r7, #16]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	7c7b      	ldrb	r3, [r7, #17]
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f8c8 	bl	8000ccc <__aeabi_i2f>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	653b      	str	r3, [r7, #80]	; 0x50

    temp = (int16_t)(data[6] << 8 | data[7]);
 8001b40:	7cbb      	ldrb	r3, [r7, #18]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	7cfb      	ldrb	r3, [r7, #19]
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f8bc 	bl	8000ccc <__aeabi_i2f>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4a71      	ldr	r2, [pc, #452]	; (8001d1c <process_MPU+0x274>)
 8001b58:	6013      	str	r3, [r2, #0]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8001b5a:	7d3b      	ldrb	r3, [r7, #20]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	7d7b      	ldrb	r3, [r7, #21]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff f8af 	bl	8000ccc <__aeabi_i2f>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	64fb      	str	r3, [r7, #76]	; 0x4c
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8001b72:	7dbb      	ldrb	r3, [r7, #22]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f8a3 	bl	8000ccc <__aeabi_i2f>
 8001b86:	4603      	mov	r3, r0
 8001b88:	64bb      	str	r3, [r7, #72]	; 0x48
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8001b8a:	7e3b      	ldrb	r3, [r7, #24]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	7e7b      	ldrb	r3, [r7, #25]
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f897 	bl	8000ccc <__aeabi_i2f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	647b      	str	r3, [r7, #68]	; 0x44

	Acc_x = Acc_x/((float)accel_factor);
 8001ba2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001ba6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001ba8:	f7ff f998 	bl	8000edc <__aeabi_fdiv>
 8001bac:	4603      	mov	r3, r0
 8001bae:	65bb      	str	r3, [r7, #88]	; 0x58
	Acc_y = Acc_y/((float)accel_factor);
 8001bb0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001bb4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001bb6:	f7ff f991 	bl	8000edc <__aeabi_fdiv>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	657b      	str	r3, [r7, #84]	; 0x54
	Acc_z = Acc_z/((float)accel_factor);
 8001bbe:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001bc2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001bc4:	f7ff f98a 	bl	8000edc <__aeabi_fdiv>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	653b      	str	r3, [r7, #80]	; 0x50

	Gyro_x = Gyro_x/gyro_factor;
 8001bcc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001bce:	f7fe fc23 	bl	8000418 <__aeabi_f2d>
 8001bd2:	a34d      	add	r3, pc, #308	; (adr r3, 8001d08 <process_MPU+0x260>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fda0 	bl	800071c <__aeabi_ddiv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7fe ff68 	bl	8000ab8 <__aeabi_d2f>
 8001be8:	4603      	mov	r3, r0
 8001bea:	64fb      	str	r3, [r7, #76]	; 0x4c
	Gyro_y = Gyro_y/gyro_factor;
 8001bec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001bee:	f7fe fc13 	bl	8000418 <__aeabi_f2d>
 8001bf2:	a345      	add	r3, pc, #276	; (adr r3, 8001d08 <process_MPU+0x260>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe fd90 	bl	800071c <__aeabi_ddiv>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe ff58 	bl	8000ab8 <__aeabi_d2f>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
	Gyro_z = Gyro_z/gyro_factor;
 8001c0c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c0e:	f7fe fc03 	bl	8000418 <__aeabi_f2d>
 8001c12:	a33d      	add	r3, pc, #244	; (adr r3, 8001d08 <process_MPU+0x260>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe fd80 	bl	800071c <__aeabi_ddiv>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe ff48 	bl	8000ab8 <__aeabi_d2f>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44


	char buffer[7];
	char n = ' ';
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	char r = '\n';
 8001c32:	230a      	movs	r3, #10
 8001c34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	roll = atan2(Acc_y,Acc_z)*RAD2DEC;
 8001c38:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c3a:	f7fe fbed 	bl	8000418 <__aeabi_f2d>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	460d      	mov	r5, r1
 8001c42:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c44:	f7fe fbe8 	bl	8000418 <__aeabi_f2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f003 fb0f 	bl	8005272 <atan2>
 8001c54:	a32e      	add	r3, pc, #184	; (adr r3, 8001d10 <process_MPU+0x268>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fc35 	bl	80004c8 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f7fe ff27 	bl	8000ab8 <__aeabi_d2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	//roll = atan2(Acc_y,Acc_z)*RAD2DEC;
	pitch = atan(-Acc_x/sqrt(Acc_y*Acc_y+Acc_z*Acc_z))*RAD2DEC;
 8001c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fbcf 	bl	8000418 <__aeabi_f2d>
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	460d      	mov	r5, r1
 8001c7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c80:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c82:	f7ff f877 	bl	8000d74 <__aeabi_fmul>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461e      	mov	r6, r3
 8001c8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001c8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c8e:	f7ff f871 	bl	8000d74 <__aeabi_fmul>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4619      	mov	r1, r3
 8001c96:	4630      	mov	r0, r6
 8001c98:	f7fe ff64 	bl	8000b64 <__addsf3>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fbba 	bl	8000418 <__aeabi_f2d>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f003 fae4 	bl	8005278 <sqrt>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fd30 	bl	800071c <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f003 f948 	bl	8004f58 <atan>
 8001cc8:	a311      	add	r3, pc, #68	; (adr r3, 8001d10 <process_MPU+0x268>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fbfb 	bl	80004c8 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f7fe feed 	bl	8000ab8 <__aeabi_d2f>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38


	complementary_filter(pitch,Gyro_x,0.01);
 8001ce2:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <process_MPU+0x278>)
 8001ce4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ce6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ce8:	f000 f81e 	bl	8001d28 <complementary_filter>

    ftoa(com_angle, buffer, 2);
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <process_MPU+0x27c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fb91 	bl	8000418 <__aeabi_f2d>
 8001cf6:	1d3a      	adds	r2, r7, #4
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	f7ff fd15 	bl	8001728 <ftoa>
//    HAL_UART_Transmit(&huart1, &n, 1, 1000);
//
//    ftoa(Gyro_z, buffer, 2);
//    HAL_UART_Transmit(&huart1, buffer, 7, 1000);
   // HAL_UART_Transmit(&huart1, &r, 1, 1000);
}
 8001cfe:	bf00      	nop
 8001d00:	3764      	adds	r7, #100	; 0x64
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d06:	bf00      	nop
 8001d08:	66666666 	.word	0x66666666
 8001d0c:	40306666 	.word	0x40306666
 8001d10:	1a5d2372 	.word	0x1a5d2372
 8001d14:	404ca5dc 	.word	0x404ca5dc
 8001d18:	200000cc 	.word	0x200000cc
 8001d1c:	20000130 	.word	0x20000130
 8001d20:	3c23d70a 	.word	0x3c23d70a
 8001d24:	200000c8 	.word	0x200000c8

08001d28 <complementary_filter>:
void complementary_filter(float angle_acc,float gyro_rate,float dt){
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
	com_angle = alpha*(com_angle + dt*gyro_rate) + (1-alpha)*angle_acc;
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff f81c 	bl	8000d74 <__aeabi_fmul>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <complementary_filter+0x88>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	4610      	mov	r0, r2
 8001d48:	f7fe ff0c 	bl	8000b64 <__addsf3>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fb62 	bl	8000418 <__aeabi_f2d>
 8001d54:	a312      	add	r3, pc, #72	; (adr r3, 8001da0 <complementary_filter+0x78>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fbb5 	bl	80004c8 <__aeabi_dmul>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4614      	mov	r4, r2
 8001d64:	461d      	mov	r5, r3
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f7fe fb56 	bl	8000418 <__aeabi_f2d>
 8001d6c:	a30e      	add	r3, pc, #56	; (adr r3, 8001da8 <complementary_filter+0x80>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fba9 	bl	80004c8 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	f7fe f9ed 	bl	800015c <__adddf3>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7fe fe95 	bl	8000ab8 <__aeabi_d2f>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <complementary_filter+0x88>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9c:	f3af 8000 	nop.w
 8001da0:	eb851eb8 	.word	0xeb851eb8
 8001da4:	3feeb851 	.word	0x3feeb851
 8001da8:	47ae1480 	.word	0x47ae1480
 8001dac:	3fa47ae1 	.word	0x3fa47ae1
 8001db0:	200000c8 	.word	0x200000c8

08001db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_MspInit+0x5c>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <HAL_MspInit+0x5c>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6193      	str	r3, [r2, #24]
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_MspInit+0x5c>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_MspInit+0x5c>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_MspInit+0x5c>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_MspInit+0x5c>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_MspInit+0x60>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <HAL_MspInit+0x60>)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000

08001e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_I2C_MspInit+0x90>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d132      	bne.n	8001e9e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e38:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e3e:	f043 0308 	orr.w	r3, r3, #8
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e56:	2312      	movs	r3, #18
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4812      	ldr	r0, [pc, #72]	; (8001eb0 <HAL_I2C_MspInit+0x98>)
 8001e66:	f000 fa49 	bl	80022fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_I2C_MspInit+0x9c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e80:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <HAL_I2C_MspInit+0x9c>)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40005400 	.word	0x40005400
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40010c00 	.word	0x40010c00
 8001eb4:	40010000 	.word	0x40010000

08001eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	d113      	bne.n	8001ef2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_TIM_Base_MspInit+0x44>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <HAL_TIM_Base_MspInit+0x44>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_TIM_Base_MspInit+0x44>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	201c      	movs	r0, #28
 8001ee8:	f000 f9d1 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eec:	201c      	movs	r0, #28
 8001eee:	f000 f9ea 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000

08001f00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1e:	d117      	bne.n	8001f50 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_TIM_MspPostInit+0x58>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a0c      	ldr	r2, [pc, #48]	; (8001f58 <HAL_TIM_MspPostInit+0x58>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_TIM_MspPostInit+0x58>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4804      	ldr	r0, [pc, #16]	; (8001f5c <HAL_TIM_MspPostInit+0x5c>)
 8001f4c:	f000 f9d6 	bl	80022fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f50:	bf00      	nop
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40010800 	.word	0x40010800

08001f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <NMI_Handler+0x4>

08001f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <MemManage_Handler+0x4>

08001f72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa6:	f000 f87f 	bl	80020a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM2_IRQHandler+0x10>)
 8001fb6:	f002 f9db 	bl	8004370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000138 	.word	0x20000138

08001fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd0:	480c      	ldr	r0, [pc, #48]	; (8002004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fd2:	490d      	ldr	r1, [pc, #52]	; (8002008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe8:	4c0a      	ldr	r4, [pc, #40]	; (8002014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ff6:	f7ff ffe5 	bl	8001fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f002 ff81 	bl	8004f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffe:	f7ff fa01 	bl	8001404 <main>
  bx lr
 8002002:	4770      	bx	lr
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002008:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800200c:	08005708 	.word	0x08005708
  ldr r2, =_sbss
 8002010:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002014:	20000190 	.word	0x20000190

08002018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC1_2_IRQHandler>
	...

0800201c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_Init+0x28>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <HAL_Init+0x28>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202c:	2003      	movs	r0, #3
 800202e:	f000 f923 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002032:	2000      	movs	r0, #0
 8002034:	f000 f808 	bl	8002048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002038:	f7ff febc 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000

08002048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_InitTick+0x54>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_InitTick+0x58>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f93b 	bl	80022e2 <HAL_SYSTICK_Config>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e00e      	b.n	8002094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d80a      	bhi.n	8002092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207c:	2200      	movs	r2, #0
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f000 f903 	bl	800228e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002088:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <HAL_InitTick+0x5c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e000      	b.n	8002094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000004 	.word	0x20000004
 80020a0:	2000000c 	.word	0x2000000c
 80020a4:	20000008 	.word	0x20000008

080020a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_IncTick+0x1c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_IncTick+0x20>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a03      	ldr	r2, [pc, #12]	; (80020c8 <HAL_IncTick+0x20>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	2000000c 	.word	0x2000000c
 80020c8:	2000018c 	.word	0x2000018c

080020cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return uwTick;
 80020d0:	4b02      	ldr	r3, [pc, #8]	; (80020dc <HAL_GetTick+0x10>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	2000018c 	.word	0x2000018c

080020e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800210c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002112:	4a04      	ldr	r2, [pc, #16]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60d3      	str	r3, [r2, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <__NVIC_GetPriorityGrouping+0x18>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f003 0307 	and.w	r3, r3, #7
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	db0b      	blt.n	800216e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	4906      	ldr	r1, [pc, #24]	; (8002178 <__NVIC_EnableIRQ+0x34>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2001      	movs	r0, #1
 8002166:	fa00 f202 	lsl.w	r2, r0, r2
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f7ff ff90 	bl	800217c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff2d 	bl	80020e0 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff42 	bl	8002128 <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff90 	bl	80021d0 <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5f 	bl	800217c <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff35 	bl	8002144 <__NVIC_EnableIRQ>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ffa2 	bl	8002234 <SysTick_Config>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b08b      	sub	sp, #44	; 0x2c
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230e:	e169      	b.n	80025e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002310:	2201      	movs	r2, #1
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	429a      	cmp	r2, r3
 800232a:	f040 8158 	bne.w	80025de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4a9a      	ldr	r2, [pc, #616]	; (800259c <HAL_GPIO_Init+0x2a0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d05e      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
 8002338:	4a98      	ldr	r2, [pc, #608]	; (800259c <HAL_GPIO_Init+0x2a0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d875      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 800233e:	4a98      	ldr	r2, [pc, #608]	; (80025a0 <HAL_GPIO_Init+0x2a4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d058      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
 8002344:	4a96      	ldr	r2, [pc, #600]	; (80025a0 <HAL_GPIO_Init+0x2a4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d86f      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 800234a:	4a96      	ldr	r2, [pc, #600]	; (80025a4 <HAL_GPIO_Init+0x2a8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d052      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
 8002350:	4a94      	ldr	r2, [pc, #592]	; (80025a4 <HAL_GPIO_Init+0x2a8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d869      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 8002356:	4a94      	ldr	r2, [pc, #592]	; (80025a8 <HAL_GPIO_Init+0x2ac>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d04c      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
 800235c:	4a92      	ldr	r2, [pc, #584]	; (80025a8 <HAL_GPIO_Init+0x2ac>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d863      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 8002362:	4a92      	ldr	r2, [pc, #584]	; (80025ac <HAL_GPIO_Init+0x2b0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d046      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
 8002368:	4a90      	ldr	r2, [pc, #576]	; (80025ac <HAL_GPIO_Init+0x2b0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d85d      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 800236e:	2b12      	cmp	r3, #18
 8002370:	d82a      	bhi.n	80023c8 <HAL_GPIO_Init+0xcc>
 8002372:	2b12      	cmp	r3, #18
 8002374:	d859      	bhi.n	800242a <HAL_GPIO_Init+0x12e>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <HAL_GPIO_Init+0x80>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	080023f7 	.word	0x080023f7
 8002380:	080023d1 	.word	0x080023d1
 8002384:	080023e3 	.word	0x080023e3
 8002388:	08002425 	.word	0x08002425
 800238c:	0800242b 	.word	0x0800242b
 8002390:	0800242b 	.word	0x0800242b
 8002394:	0800242b 	.word	0x0800242b
 8002398:	0800242b 	.word	0x0800242b
 800239c:	0800242b 	.word	0x0800242b
 80023a0:	0800242b 	.word	0x0800242b
 80023a4:	0800242b 	.word	0x0800242b
 80023a8:	0800242b 	.word	0x0800242b
 80023ac:	0800242b 	.word	0x0800242b
 80023b0:	0800242b 	.word	0x0800242b
 80023b4:	0800242b 	.word	0x0800242b
 80023b8:	0800242b 	.word	0x0800242b
 80023bc:	0800242b 	.word	0x0800242b
 80023c0:	080023d9 	.word	0x080023d9
 80023c4:	080023ed 	.word	0x080023ed
 80023c8:	4a79      	ldr	r2, [pc, #484]	; (80025b0 <HAL_GPIO_Init+0x2b4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ce:	e02c      	b.n	800242a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	623b      	str	r3, [r7, #32]
          break;
 80023d6:	e029      	b.n	800242c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	3304      	adds	r3, #4
 80023de:	623b      	str	r3, [r7, #32]
          break;
 80023e0:	e024      	b.n	800242c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	3308      	adds	r3, #8
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e01f      	b.n	800242c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	330c      	adds	r3, #12
 80023f2:	623b      	str	r3, [r7, #32]
          break;
 80023f4:	e01a      	b.n	800242c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023fe:	2304      	movs	r3, #4
 8002400:	623b      	str	r3, [r7, #32]
          break;
 8002402:	e013      	b.n	800242c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800240c:	2308      	movs	r3, #8
 800240e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	611a      	str	r2, [r3, #16]
          break;
 8002416:	e009      	b.n	800242c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002418:	2308      	movs	r3, #8
 800241a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	615a      	str	r2, [r3, #20]
          break;
 8002422:	e003      	b.n	800242c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
          break;
 8002428:	e000      	b.n	800242c <HAL_GPIO_Init+0x130>
          break;
 800242a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2bff      	cmp	r3, #255	; 0xff
 8002430:	d801      	bhi.n	8002436 <HAL_GPIO_Init+0x13a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	e001      	b.n	800243a <HAL_GPIO_Init+0x13e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2bff      	cmp	r3, #255	; 0xff
 8002440:	d802      	bhi.n	8002448 <HAL_GPIO_Init+0x14c>
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	e002      	b.n	800244e <HAL_GPIO_Init+0x152>
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	3b08      	subs	r3, #8
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	210f      	movs	r1, #15
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	6a39      	ldr	r1, [r7, #32]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	431a      	orrs	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80b1 	beq.w	80025de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800247c:	4b4d      	ldr	r3, [pc, #308]	; (80025b4 <HAL_GPIO_Init+0x2b8>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4a4c      	ldr	r2, [pc, #304]	; (80025b4 <HAL_GPIO_Init+0x2b8>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6193      	str	r3, [r2, #24]
 8002488:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <HAL_GPIO_Init+0x2b8>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002494:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_GPIO_Init+0x2bc>)
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220f      	movs	r2, #15
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a40      	ldr	r2, [pc, #256]	; (80025bc <HAL_GPIO_Init+0x2c0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d013      	beq.n	80024e8 <HAL_GPIO_Init+0x1ec>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a3f      	ldr	r2, [pc, #252]	; (80025c0 <HAL_GPIO_Init+0x2c4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00d      	beq.n	80024e4 <HAL_GPIO_Init+0x1e8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a3e      	ldr	r2, [pc, #248]	; (80025c4 <HAL_GPIO_Init+0x2c8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d007      	beq.n	80024e0 <HAL_GPIO_Init+0x1e4>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a3d      	ldr	r2, [pc, #244]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d101      	bne.n	80024dc <HAL_GPIO_Init+0x1e0>
 80024d8:	2303      	movs	r3, #3
 80024da:	e006      	b.n	80024ea <HAL_GPIO_Init+0x1ee>
 80024dc:	2304      	movs	r3, #4
 80024de:	e004      	b.n	80024ea <HAL_GPIO_Init+0x1ee>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e002      	b.n	80024ea <HAL_GPIO_Init+0x1ee>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_GPIO_Init+0x1ee>
 80024e8:	2300      	movs	r3, #0
 80024ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ec:	f002 0203 	and.w	r2, r2, #3
 80024f0:	0092      	lsls	r2, r2, #2
 80024f2:	4093      	lsls	r3, r2
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024fa:	492f      	ldr	r1, [pc, #188]	; (80025b8 <HAL_GPIO_Init+0x2bc>)
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	492c      	ldr	r1, [pc, #176]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	600b      	str	r3, [r1, #0]
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002522:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	43db      	mvns	r3, r3
 800252a:	4928      	ldr	r1, [pc, #160]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800252c:	4013      	ands	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4922      	ldr	r1, [pc, #136]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	43db      	mvns	r3, r3
 8002552:	491e      	ldr	r1, [pc, #120]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002554:	4013      	ands	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	4918      	ldr	r1, [pc, #96]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	608b      	str	r3, [r1, #8]
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	43db      	mvns	r3, r3
 800257a:	4914      	ldr	r1, [pc, #80]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800257c:	4013      	ands	r3, r2
 800257e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d021      	beq.n	80025d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	490e      	ldr	r1, [pc, #56]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	60cb      	str	r3, [r1, #12]
 8002598:	e021      	b.n	80025de <HAL_GPIO_Init+0x2e2>
 800259a:	bf00      	nop
 800259c:	10320000 	.word	0x10320000
 80025a0:	10310000 	.word	0x10310000
 80025a4:	10220000 	.word	0x10220000
 80025a8:	10210000 	.word	0x10210000
 80025ac:	10120000 	.word	0x10120000
 80025b0:	10110000 	.word	0x10110000
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010000 	.word	0x40010000
 80025bc:	40010800 	.word	0x40010800
 80025c0:	40010c00 	.word	0x40010c00
 80025c4:	40011000 	.word	0x40011000
 80025c8:	40011400 	.word	0x40011400
 80025cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_GPIO_Init+0x304>)
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	4909      	ldr	r1, [pc, #36]	; (8002600 <HAL_GPIO_Init+0x304>)
 80025da:	4013      	ands	r3, r2
 80025dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	3301      	adds	r3, #1
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	fa22 f303 	lsr.w	r3, r2, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f47f ae8e 	bne.w	8002310 <HAL_GPIO_Init+0x14>
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	372c      	adds	r7, #44	; 0x2c
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	40010400 	.word	0x40010400

08002604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002614:	787b      	ldrb	r3, [r7, #1]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002620:	e003      	b.n	800262a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	041a      	lsls	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	611a      	str	r2, [r3, #16]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e12b      	b.n	800289e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fbdc 	bl	8001e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2224      	movs	r2, #36	; 0x24
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002686:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002696:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002698:	f001 fc9c 	bl	8003fd4 <HAL_RCC_GetPCLK1Freq>
 800269c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4a81      	ldr	r2, [pc, #516]	; (80028a8 <HAL_I2C_Init+0x274>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d807      	bhi.n	80026b8 <HAL_I2C_Init+0x84>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4a80      	ldr	r2, [pc, #512]	; (80028ac <HAL_I2C_Init+0x278>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	bf94      	ite	ls
 80026b0:	2301      	movls	r3, #1
 80026b2:	2300      	movhi	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	e006      	b.n	80026c6 <HAL_I2C_Init+0x92>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a7d      	ldr	r2, [pc, #500]	; (80028b0 <HAL_I2C_Init+0x27c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	bf94      	ite	ls
 80026c0:	2301      	movls	r3, #1
 80026c2:	2300      	movhi	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0e7      	b.n	800289e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a78      	ldr	r2, [pc, #480]	; (80028b4 <HAL_I2C_Init+0x280>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0c9b      	lsrs	r3, r3, #18
 80026d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a6a      	ldr	r2, [pc, #424]	; (80028a8 <HAL_I2C_Init+0x274>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d802      	bhi.n	8002708 <HAL_I2C_Init+0xd4>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	3301      	adds	r3, #1
 8002706:	e009      	b.n	800271c <HAL_I2C_Init+0xe8>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	4a69      	ldr	r2, [pc, #420]	; (80028b8 <HAL_I2C_Init+0x284>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	099b      	lsrs	r3, r3, #6
 800271a:	3301      	adds	r3, #1
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	430b      	orrs	r3, r1
 8002722:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800272e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	495c      	ldr	r1, [pc, #368]	; (80028a8 <HAL_I2C_Init+0x274>)
 8002738:	428b      	cmp	r3, r1
 800273a:	d819      	bhi.n	8002770 <HAL_I2C_Init+0x13c>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e59      	subs	r1, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fbb1 f3f3 	udiv	r3, r1, r3
 800274a:	1c59      	adds	r1, r3, #1
 800274c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002750:	400b      	ands	r3, r1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_I2C_Init+0x138>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1e59      	subs	r1, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fbb1 f3f3 	udiv	r3, r1, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276a:	e051      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 800276c:	2304      	movs	r3, #4
 800276e:	e04f      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d111      	bne.n	800279c <HAL_I2C_Init+0x168>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1e58      	subs	r0, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	440b      	add	r3, r1
 8002786:	fbb0 f3f3 	udiv	r3, r0, r3
 800278a:	3301      	adds	r3, #1
 800278c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e012      	b.n	80027c2 <HAL_I2C_Init+0x18e>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1e58      	subs	r0, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	0099      	lsls	r1, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Init+0x196>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e022      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10e      	bne.n	80027f0 <HAL_I2C_Init+0x1bc>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1e58      	subs	r0, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	440b      	add	r3, r1
 80027e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ee:	e00f      	b.n	8002810 <HAL_I2C_Init+0x1dc>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1e58      	subs	r0, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	0099      	lsls	r1, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	fbb0 f3f3 	udiv	r3, r0, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	6809      	ldr	r1, [r1, #0]
 8002814:	4313      	orrs	r3, r2
 8002816:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800283e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6911      	ldr	r1, [r2, #16]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68d2      	ldr	r2, [r2, #12]
 800284a:	4311      	orrs	r1, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	430b      	orrs	r3, r1
 8002852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	000186a0 	.word	0x000186a0
 80028ac:	001e847f 	.word	0x001e847f
 80028b0:	003d08ff 	.word	0x003d08ff
 80028b4:	431bde83 	.word	0x431bde83
 80028b8:	10624dd3 	.word	0x10624dd3

080028bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	461a      	mov	r2, r3
 80028c8:	460b      	mov	r3, r1
 80028ca:	817b      	strh	r3, [r7, #10]
 80028cc:	4613      	mov	r3, r2
 80028ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff fbfc 	bl	80020cc <HAL_GetTick>
 80028d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b20      	cmp	r3, #32
 80028e0:	f040 80e0 	bne.w	8002aa4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2319      	movs	r3, #25
 80028ea:	2201      	movs	r2, #1
 80028ec:	4970      	ldr	r1, [pc, #448]	; (8002ab0 <HAL_I2C_Master_Transmit+0x1f4>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fdc0 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	e0d3      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_I2C_Master_Transmit+0x50>
 8002908:	2302      	movs	r3, #2
 800290a:	e0cc      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d007      	beq.n	8002932 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002940:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2221      	movs	r2, #33	; 0x21
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2210      	movs	r2, #16
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	893a      	ldrh	r2, [r7, #8]
 8002962:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a50      	ldr	r2, [pc, #320]	; (8002ab4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	6a3a      	ldr	r2, [r7, #32]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fc2a 	bl	80031d4 <I2C_MasterRequestWrite>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e08d      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029a0:	e066      	b.n	8002a70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	6a39      	ldr	r1, [r7, #32]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fe3a 	bl	8003620 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00d      	beq.n	80029ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d107      	bne.n	80029ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06b      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	781a      	ldrb	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d11b      	bne.n	8002a44 <HAL_I2C_Master_Transmit+0x188>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d017      	beq.n	8002a44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	6a39      	ldr	r1, [r7, #32]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fe2a 	bl	80036a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d107      	bne.n	8002a6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e01a      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d194      	bne.n	80029a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e000      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
  }
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	00100002 	.word	0x00100002
 8002ab4:	ffff0000 	.word	0xffff0000

08002ab8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	817b      	strh	r3, [r7, #10]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff fafc 	bl	80020cc <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	f040 823f 	bne.w	8002f62 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2319      	movs	r3, #25
 8002aea:	2201      	movs	r2, #1
 8002aec:	497f      	ldr	r1, [pc, #508]	; (8002cec <HAL_I2C_Master_Receive+0x234>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fcc0 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
 8002afc:	e232      	b.n	8002f64 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_I2C_Master_Receive+0x54>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e22b      	b.n	8002f64 <HAL_I2C_Master_Receive+0x4ac>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d007      	beq.n	8002b32 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2222      	movs	r2, #34	; 0x22
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	893a      	ldrh	r2, [r7, #8]
 8002b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a5f      	ldr	r2, [pc, #380]	; (8002cf0 <HAL_I2C_Master_Receive+0x238>)
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b74:	8979      	ldrh	r1, [r7, #10]
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fbac 	bl	80032d8 <I2C_MasterRequestRead>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1ec      	b.n	8002f64 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d113      	bne.n	8002bba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e1c0      	b.n	8002f3c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d11e      	bne.n	8002c00 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd2:	b672      	cpsid	i
}
 8002bd4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bfc:	b662      	cpsie	i
}
 8002bfe:	e035      	b.n	8002c6c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d11e      	bne.n	8002c46 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c18:	b672      	cpsid	i
}
 8002c1a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c42:	b662      	cpsie	i
}
 8002c44:	e012      	b.n	8002c6c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c6c:	e166      	b.n	8002f3c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	f200 811f 	bhi.w	8002eb6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d123      	bne.n	8002cc8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fd4d 	bl	8003724 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e167      	b.n	8002f64 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cc6:	e139      	b.n	8002f3c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d152      	bne.n	8002d76 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	4906      	ldr	r1, [pc, #24]	; (8002cf4 <HAL_I2C_Master_Receive+0x23c>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fbca 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e13c      	b.n	8002f64 <HAL_I2C_Master_Receive+0x4ac>
 8002cea:	bf00      	nop
 8002cec:	00100002 	.word	0x00100002
 8002cf0:	ffff0000 	.word	0xffff0000
 8002cf4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf8:	b672      	cpsid	i
}
 8002cfa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d3e:	b662      	cpsie	i
}
 8002d40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d74:	e0e2      	b.n	8002f3c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	497b      	ldr	r1, [pc, #492]	; (8002f6c <HAL_I2C_Master_Receive+0x4b4>)
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fb77 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0e9      	b.n	8002f64 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002da0:	b672      	cpsid	i
}
 8002da2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dd6:	4b66      	ldr	r3, [pc, #408]	; (8002f70 <HAL_I2C_Master_Receive+0x4b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	08db      	lsrs	r3, r3, #3
 8002ddc:	4a65      	ldr	r2, [pc, #404]	; (8002f74 <HAL_I2C_Master_Receive+0x4bc>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0a1a      	lsrs	r2, r3, #8
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00da      	lsls	r2, r3, #3
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d118      	bne.n	8002e2e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e1e:	b662      	cpsie	i
}
 8002e20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e09a      	b.n	8002f64 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d1d9      	bne.n	8002df0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e7e:	b662      	cpsie	i
}
 8002e80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eb4:	e042      	b.n	8002f3c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fc32 	bl	8003724 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e04c      	b.n	8002f64 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d118      	bne.n	8002f3c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f47f ae94 	bne.w	8002c6e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
  }
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	00010004 	.word	0x00010004
 8002f70:	20000004 	.word	0x20000004
 8002f74:	14f8b589 	.word	0x14f8b589

08002f78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	460b      	mov	r3, r1
 8002f86:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7ff f8a0 	bl	80020cc <HAL_GetTick>
 8002f8c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	f040 8111 	bne.w	80031c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2319      	movs	r3, #25
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4988      	ldr	r1, [pc, #544]	; (80031cc <HAL_I2C_IsDeviceReady+0x254>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fa62 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e104      	b.n	80031c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_I2C_IsDeviceReady+0x50>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e0fd      	b.n	80031c4 <HAL_I2C_IsDeviceReady+0x24c>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d007      	beq.n	8002fee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ffc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2224      	movs	r2, #36	; 0x24
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a70      	ldr	r2, [pc, #448]	; (80031d0 <HAL_I2C_IsDeviceReady+0x258>)
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003020:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2200      	movs	r2, #0
 800302a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fa20 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00d      	beq.n	8003056 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003048:	d103      	bne.n	8003052 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e0b6      	b.n	80031c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003056:	897b      	ldrh	r3, [r7, #10]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003064:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003066:	f7ff f831 	bl	80020cc <HAL_GetTick>
 800306a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b02      	cmp	r3, #2
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003090:	bf0c      	ite	eq
 8003092:	2301      	moveq	r3, #1
 8003094:	2300      	movne	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800309a:	e025      	b.n	80030e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800309c:	f7ff f816 	bl	80020cc <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d302      	bcc.n	80030b2 <HAL_I2C_IsDeviceReady+0x13a>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d103      	bne.n	80030ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	22a0      	movs	r2, #160	; 0xa0
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2ba0      	cmp	r3, #160	; 0xa0
 80030f2:	d005      	beq.n	8003100 <HAL_I2C_IsDeviceReady+0x188>
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_I2C_IsDeviceReady+0x188>
 80030fa:	7dbb      	ldrb	r3, [r7, #22]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0cd      	beq.n	800309c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d129      	bne.n	800316a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003124:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	2319      	movs	r3, #25
 8003142:	2201      	movs	r2, #1
 8003144:	4921      	ldr	r1, [pc, #132]	; (80031cc <HAL_I2C_IsDeviceReady+0x254>)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f994 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e036      	b.n	80031c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e02c      	b.n	80031c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003178:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003182:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2319      	movs	r3, #25
 800318a:	2201      	movs	r2, #1
 800318c:	490f      	ldr	r1, [pc, #60]	; (80031cc <HAL_I2C_IsDeviceReady+0x254>)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f970 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e012      	b.n	80031c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	3301      	adds	r3, #1
 80031a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	f4ff af32 	bcc.w	8003012 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
  }
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	00100002 	.word	0x00100002
 80031d0:	ffff0000 	.word	0xffff0000

080031d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	460b      	mov	r3, r1
 80031e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d006      	beq.n	80031fe <I2C_MasterRequestWrite+0x2a>
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d003      	beq.n	80031fe <I2C_MasterRequestWrite+0x2a>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031fc:	d108      	bne.n	8003210 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e00b      	b.n	8003228 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	2b12      	cmp	r3, #18
 8003216:	d107      	bne.n	8003228 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003226:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f91d 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00d      	beq.n	800325c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324e:	d103      	bne.n	8003258 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e035      	b.n	80032c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003264:	d108      	bne.n	8003278 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003266:	897b      	ldrh	r3, [r7, #10]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	e01b      	b.n	80032b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003278:	897b      	ldrh	r3, [r7, #10]
 800327a:	11db      	asrs	r3, r3, #7
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f003 0306 	and.w	r3, r3, #6
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f063 030f 	orn	r3, r3, #15
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	490e      	ldr	r1, [pc, #56]	; (80032d0 <I2C_MasterRequestWrite+0xfc>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f943 	bl	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e010      	b.n	80032c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032a6:	897b      	ldrh	r3, [r7, #10]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <I2C_MasterRequestWrite+0x100>)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f933 	bl	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	00010008 	.word	0x00010008
 80032d4:	00010002 	.word	0x00010002

080032d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	460b      	mov	r3, r1
 80032e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d006      	beq.n	8003312 <I2C_MasterRequestRead+0x3a>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d003      	beq.n	8003312 <I2C_MasterRequestRead+0x3a>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003310:	d108      	bne.n	8003324 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e00b      	b.n	800333c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	2b11      	cmp	r3, #17
 800332a:	d107      	bne.n	800333c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800333a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f893 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003362:	d103      	bne.n	800336c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e079      	b.n	8003464 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003378:	d108      	bne.n	800338c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800337a:	897b      	ldrh	r3, [r7, #10]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]
 800338a:	e05f      	b.n	800344c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800338c:	897b      	ldrh	r3, [r7, #10]
 800338e:	11db      	asrs	r3, r3, #7
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 0306 	and.w	r3, r3, #6
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f063 030f 	orn	r3, r3, #15
 800339c:	b2da      	uxtb	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4930      	ldr	r1, [pc, #192]	; (800346c <I2C_MasterRequestRead+0x194>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f8b9 	bl	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e054      	b.n	8003464 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033ba:	897b      	ldrh	r3, [r7, #10]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4929      	ldr	r1, [pc, #164]	; (8003470 <I2C_MasterRequestRead+0x198>)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f8a9 	bl	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e044      	b.n	8003464 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f831 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003426:	d103      	bne.n	8003430 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e017      	b.n	8003464 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003434:	897b      	ldrh	r3, [r7, #10]
 8003436:	11db      	asrs	r3, r3, #7
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f003 0306 	and.w	r3, r3, #6
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f063 030e 	orn	r3, r3, #14
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4907      	ldr	r1, [pc, #28]	; (8003470 <I2C_MasterRequestRead+0x198>)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f865 	bl	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	00010008 	.word	0x00010008
 8003470:	00010002 	.word	0x00010002

08003474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003484:	e025      	b.n	80034d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d021      	beq.n	80034d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348e:	f7fe fe1d 	bl	80020cc <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d302      	bcc.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d116      	bne.n	80034d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e023      	b.n	800351a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d10d      	bne.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4013      	ands	r3, r2
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	e00c      	b.n	8003512 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	43da      	mvns	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf0c      	ite	eq
 800350a:	2301      	moveq	r3, #1
 800350c:	2300      	movne	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	429a      	cmp	r2, r3
 8003516:	d0b6      	beq.n	8003486 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003530:	e051      	b.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d123      	bne.n	800358a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003550:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800355a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f043 0204 	orr.w	r2, r3, #4
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e046      	b.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d021      	beq.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fe fd9b 	bl	80020cc <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d116      	bne.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e020      	b.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d10c      	bne.n	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	43da      	mvns	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4013      	ands	r3, r2
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bf14      	ite	ne
 80035f2:	2301      	movne	r3, #1
 80035f4:	2300      	moveq	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	e00b      	b.n	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	43da      	mvns	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4013      	ands	r3, r2
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf14      	ite	ne
 800360c:	2301      	movne	r3, #1
 800360e:	2300      	moveq	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d18d      	bne.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800362c:	e02d      	b.n	800368a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f8ce 	bl	80037d0 <I2C_IsAcknowledgeFailed>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e02d      	b.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d021      	beq.n	800368a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003646:	f7fe fd41 	bl	80020cc <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	d302      	bcc.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d116      	bne.n	800368a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e007      	b.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	2b80      	cmp	r3, #128	; 0x80
 8003696:	d1ca      	bne.n	800362e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036ae:	e02d      	b.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f88d 	bl	80037d0 <I2C_IsAcknowledgeFailed>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e02d      	b.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d021      	beq.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c8:	f7fe fd00 	bl	80020cc <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d116      	bne.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f043 0220 	orr.w	r2, r3, #32
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e007      	b.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b04      	cmp	r3, #4
 8003718:	d1ca      	bne.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003730:	e042      	b.n	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b10      	cmp	r3, #16
 800373e:	d119      	bne.n	8003774 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0210 	mvn.w	r2, #16
 8003748:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e029      	b.n	80037c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003774:	f7fe fcaa 	bl	80020cc <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	429a      	cmp	r2, r3
 8003782:	d302      	bcc.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d116      	bne.n	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e007      	b.n	80037c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b40      	cmp	r3, #64	; 0x40
 80037c4:	d1b5      	bne.n	8003732 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e6:	d11b      	bne.n	8003820 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f043 0204 	orr.w	r2, r3, #4
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e26c      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 8087 	beq.w	800395a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800384c:	4b92      	ldr	r3, [pc, #584]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b04      	cmp	r3, #4
 8003856:	d00c      	beq.n	8003872 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003858:	4b8f      	ldr	r3, [pc, #572]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b08      	cmp	r3, #8
 8003862:	d112      	bne.n	800388a <HAL_RCC_OscConfig+0x5e>
 8003864:	4b8c      	ldr	r3, [pc, #560]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003870:	d10b      	bne.n	800388a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003872:	4b89      	ldr	r3, [pc, #548]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d06c      	beq.n	8003958 <HAL_RCC_OscConfig+0x12c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d168      	bne.n	8003958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e246      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x76>
 8003894:	4b80      	ldr	r3, [pc, #512]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a7f      	ldr	r2, [pc, #508]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 800389a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	e02e      	b.n	8003900 <HAL_RCC_OscConfig+0xd4>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x98>
 80038aa:	4b7b      	ldr	r3, [pc, #492]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a7a      	ldr	r2, [pc, #488]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b78      	ldr	r3, [pc, #480]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a77      	ldr	r2, [pc, #476]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e01d      	b.n	8003900 <HAL_RCC_OscConfig+0xd4>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0xbc>
 80038ce:	4b72      	ldr	r3, [pc, #456]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a71      	ldr	r2, [pc, #452]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	4b6f      	ldr	r3, [pc, #444]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a6e      	ldr	r2, [pc, #440]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e00b      	b.n	8003900 <HAL_RCC_OscConfig+0xd4>
 80038e8:	4b6b      	ldr	r3, [pc, #428]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6a      	ldr	r2, [pc, #424]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b68      	ldr	r3, [pc, #416]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a67      	ldr	r2, [pc, #412]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d013      	beq.n	8003930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fe fbe0 	bl	80020cc <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003910:	f7fe fbdc 	bl	80020cc <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	; 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e1fa      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0xe4>
 800392e:	e014      	b.n	800395a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fe fbcc 	bl	80020cc <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003938:	f7fe fbc8 	bl	80020cc <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	; 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e1e6      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x10c>
 8003956:	e000      	b.n	800395a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d063      	beq.n	8003a2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003966:	4b4c      	ldr	r3, [pc, #304]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003972:	4b49      	ldr	r3, [pc, #292]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b08      	cmp	r3, #8
 800397c:	d11c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x18c>
 800397e:	4b46      	ldr	r3, [pc, #280]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d116      	bne.n	80039b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398a:	4b43      	ldr	r3, [pc, #268]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_RCC_OscConfig+0x176>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e1ba      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a2:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4939      	ldr	r1, [pc, #228]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b6:	e03a      	b.n	8003a2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d020      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c0:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c6:	f7fe fb81 	bl	80020cc <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ce:	f7fe fb7d 	bl	80020cc <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e19b      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4927      	ldr	r1, [pc, #156]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
 8003a00:	e015      	b.n	8003a2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a02:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <HAL_RCC_OscConfig+0x270>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe fb60 	bl	80020cc <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a10:	f7fe fb5c 	bl	80020cc <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e17a      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d03a      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d019      	beq.n	8003a76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a42:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <HAL_RCC_OscConfig+0x274>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a48:	f7fe fb40 	bl	80020cc <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a50:	f7fe fb3c 	bl	80020cc <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e15a      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f000 fac4 	bl	8003ffc <RCC_Delay>
 8003a74:	e01c      	b.n	8003ab0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <HAL_RCC_OscConfig+0x274>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7c:	f7fe fb26 	bl	80020cc <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a82:	e00f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a84:	f7fe fb22 	bl	80020cc <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d908      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e140      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	42420000 	.word	0x42420000
 8003aa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa4:	4b9e      	ldr	r3, [pc, #632]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e9      	bne.n	8003a84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80a6 	beq.w	8003c0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac2:	4b97      	ldr	r3, [pc, #604]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	4b94      	ldr	r3, [pc, #592]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	4a93      	ldr	r2, [pc, #588]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	61d3      	str	r3, [r2, #28]
 8003ada:	4b91      	ldr	r3, [pc, #580]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aea:	4b8e      	ldr	r3, [pc, #568]	; (8003d24 <HAL_RCC_OscConfig+0x4f8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d118      	bne.n	8003b28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af6:	4b8b      	ldr	r3, [pc, #556]	; (8003d24 <HAL_RCC_OscConfig+0x4f8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a8a      	ldr	r2, [pc, #552]	; (8003d24 <HAL_RCC_OscConfig+0x4f8>)
 8003afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b02:	f7fe fae3 	bl	80020cc <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0a:	f7fe fadf 	bl	80020cc <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b64      	cmp	r3, #100	; 0x64
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e0fd      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	4b81      	ldr	r3, [pc, #516]	; (8003d24 <HAL_RCC_OscConfig+0x4f8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d106      	bne.n	8003b3e <HAL_RCC_OscConfig+0x312>
 8003b30:	4b7b      	ldr	r3, [pc, #492]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4a7a      	ldr	r2, [pc, #488]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6213      	str	r3, [r2, #32]
 8003b3c:	e02d      	b.n	8003b9a <HAL_RCC_OscConfig+0x36e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x334>
 8003b46:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4a75      	ldr	r2, [pc, #468]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	6213      	str	r3, [r2, #32]
 8003b52:	4b73      	ldr	r3, [pc, #460]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4a72      	ldr	r2, [pc, #456]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b58:	f023 0304 	bic.w	r3, r3, #4
 8003b5c:	6213      	str	r3, [r2, #32]
 8003b5e:	e01c      	b.n	8003b9a <HAL_RCC_OscConfig+0x36e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d10c      	bne.n	8003b82 <HAL_RCC_OscConfig+0x356>
 8003b68:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	4a6c      	ldr	r2, [pc, #432]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b6e:	f043 0304 	orr.w	r3, r3, #4
 8003b72:	6213      	str	r3, [r2, #32]
 8003b74:	4b6a      	ldr	r3, [pc, #424]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4a69      	ldr	r2, [pc, #420]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6213      	str	r3, [r2, #32]
 8003b80:	e00b      	b.n	8003b9a <HAL_RCC_OscConfig+0x36e>
 8003b82:	4b67      	ldr	r3, [pc, #412]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a66      	ldr	r2, [pc, #408]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	6213      	str	r3, [r2, #32]
 8003b8e:	4b64      	ldr	r3, [pc, #400]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4a63      	ldr	r2, [pc, #396]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003b94:	f023 0304 	bic.w	r3, r3, #4
 8003b98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d015      	beq.n	8003bce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba2:	f7fe fa93 	bl	80020cc <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003baa:	f7fe fa8f 	bl	80020cc <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e0ab      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc0:	4b57      	ldr	r3, [pc, #348]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ee      	beq.n	8003baa <HAL_RCC_OscConfig+0x37e>
 8003bcc:	e014      	b.n	8003bf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bce:	f7fe fa7d 	bl	80020cc <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd4:	e00a      	b.n	8003bec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fe fa79 	bl	80020cc <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e095      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bec:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ee      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d105      	bne.n	8003c0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfe:	4b48      	ldr	r3, [pc, #288]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	4a47      	ldr	r2, [pc, #284]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8081 	beq.w	8003d16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c14:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 030c 	and.w	r3, r3, #12
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d061      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d146      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c28:	4b3f      	ldr	r3, [pc, #252]	; (8003d28 <HAL_RCC_OscConfig+0x4fc>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fe fa4d 	bl	80020cc <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fe fa49 	bl	80020cc <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e067      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c48:	4b35      	ldr	r3, [pc, #212]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f0      	bne.n	8003c36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d108      	bne.n	8003c70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c5e:	4b30      	ldr	r3, [pc, #192]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	492d      	ldr	r1, [pc, #180]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c70:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a19      	ldr	r1, [r3, #32]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	430b      	orrs	r3, r1
 8003c82:	4927      	ldr	r1, [pc, #156]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c88:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <HAL_RCC_OscConfig+0x4fc>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fe fa1d 	bl	80020cc <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7fe fa19 	bl	80020cc <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e037      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x46a>
 8003cb4:	e02f      	b.n	8003d16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_RCC_OscConfig+0x4fc>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fe fa06 	bl	80020cc <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fe fa02 	bl	80020cc <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e020      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x498>
 8003ce2:	e018      	b.n	8003d16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e013      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_OscConfig+0x4f4>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40007000 	.word	0x40007000
 8003d28:	42420060 	.word	0x42420060

08003d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0d0      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d40:	4b6a      	ldr	r3, [pc, #424]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d910      	bls.n	8003d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4e:	4b67      	ldr	r3, [pc, #412]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 0207 	bic.w	r2, r3, #7
 8003d56:	4965      	ldr	r1, [pc, #404]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b63      	ldr	r3, [pc, #396]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0b8      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d020      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d88:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da0:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4a52      	ldr	r2, [pc, #328]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003daa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	494d      	ldr	r1, [pc, #308]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d040      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d115      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e07f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dea:	4b41      	ldr	r3, [pc, #260]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e073      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfa:	4b3d      	ldr	r3, [pc, #244]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e06b      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f023 0203 	bic.w	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4936      	ldr	r1, [pc, #216]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e1c:	f7fe f956 	bl	80020cc <HAL_GetTick>
 8003e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e24:	f7fe f952 	bl	80020cc <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e053      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 020c 	and.w	r2, r3, #12
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d1eb      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b27      	ldr	r3, [pc, #156]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d210      	bcs.n	8003e7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5a:	4b24      	ldr	r3, [pc, #144]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 0207 	bic.w	r2, r3, #7
 8003e62:	4922      	ldr	r1, [pc, #136]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e032      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4916      	ldr	r1, [pc, #88]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eba:	f000 f821 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	490a      	ldr	r1, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ecc:	5ccb      	ldrb	r3, [r1, r3]
 8003ece:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1d0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe f8b4 	bl	8002048 <HAL_InitTick>

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	08005678 	.word	0x08005678
 8003ef8:	20000004 	.word	0x20000004
 8003efc:	20000008 	.word	0x20000008

08003f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	b490      	push	{r4, r7}
 8003f02:	b08a      	sub	sp, #40	; 0x28
 8003f04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f08:	1d3c      	adds	r4, r7, #4
 8003f0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f10:	f240 2301 	movw	r3, #513	; 0x201
 8003f14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f2a:	4b22      	ldr	r3, [pc, #136]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d002      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x40>
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0x46>
 8003f3e:	e02d      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f42:	623b      	str	r3, [r7, #32]
      break;
 8003f44:	e02d      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	0c9b      	lsrs	r3, r3, #18
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f52:	4413      	add	r3, r2
 8003f54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	0c5b      	lsrs	r3, r3, #17
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f72:	4413      	add	r3, r2
 8003f74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4a0e      	ldr	r2, [pc, #56]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f7e:	fb02 f203 	mul.w	r2, r2, r3
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8a:	e004      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	4a0b      	ldr	r2, [pc, #44]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	623b      	str	r3, [r7, #32]
      break;
 8003f9a:	e002      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f9c:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f9e:	623b      	str	r3, [r7, #32]
      break;
 8003fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3728      	adds	r7, #40	; 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc90      	pop	{r4, r7}
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	0800560c 	.word	0x0800560c
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	007a1200 	.word	0x007a1200
 8003fbc:	003d0900 	.word	0x003d0900

08003fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc4:	4b02      	ldr	r3, [pc, #8]	; (8003fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	20000004 	.word	0x20000004

08003fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fd8:	f7ff fff2 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4903      	ldr	r1, [pc, #12]	; (8003ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08005688 	.word	0x08005688

08003ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004004:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <RCC_Delay+0x34>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <RCC_Delay+0x38>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	0a5b      	lsrs	r3, r3, #9
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004018:	bf00      	nop
  }
  while (Delay --);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1e5a      	subs	r2, r3, #1
 800401e:	60fa      	str	r2, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f9      	bne.n	8004018 <RCC_Delay+0x1c>
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	20000004 	.word	0x20000004
 8004034:	10624dd3 	.word	0x10624dd3

08004038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e041      	b.n	80040ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fd ff2a 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 fc28 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e03a      	b.n	8004166 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a18      	ldr	r2, [pc, #96]	; (8004170 <HAL_TIM_Base_Start_IT+0x98>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00e      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0x58>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d009      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0x58>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a14      	ldr	r2, [pc, #80]	; (8004174 <HAL_TIM_Base_Start_IT+0x9c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0x58>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a13      	ldr	r2, [pc, #76]	; (8004178 <HAL_TIM_Base_Start_IT+0xa0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d111      	bne.n	8004154 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b06      	cmp	r3, #6
 8004140:	d010      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	e007      	b.n	8004164 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800

0800417c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e041      	b.n	8004212 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f839 	bl	800421a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f000 fb86 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_TIM_PWM_Start+0x24>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e022      	b.n	8004296 <HAL_TIM_PWM_Start+0x6a>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d109      	bne.n	800426a <HAL_TIM_PWM_Start+0x3e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	e015      	b.n	8004296 <HAL_TIM_PWM_Start+0x6a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d109      	bne.n	8004284 <HAL_TIM_PWM_Start+0x58>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e008      	b.n	8004296 <HAL_TIM_PWM_Start+0x6a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e05e      	b.n	800435c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0x82>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ac:	e013      	b.n	80042d6 <HAL_TIM_PWM_Start+0xaa>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0x92>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042bc:	e00b      	b.n	80042d6 <HAL_TIM_PWM_Start+0xaa>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0xa2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042cc:	e003      	b.n	80042d6 <HAL_TIM_PWM_Start+0xaa>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2201      	movs	r2, #1
 80042dc:	6839      	ldr	r1, [r7, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fd74 	bl	8004dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <HAL_TIM_PWM_Start+0x138>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d107      	bne.n	80042fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a18      	ldr	r2, [pc, #96]	; (8004364 <HAL_TIM_PWM_Start+0x138>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_TIM_PWM_Start+0xfa>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d009      	beq.n	8004326 <HAL_TIM_PWM_Start+0xfa>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a14      	ldr	r2, [pc, #80]	; (8004368 <HAL_TIM_PWM_Start+0x13c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_TIM_PWM_Start+0xfa>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a12      	ldr	r2, [pc, #72]	; (800436c <HAL_TIM_PWM_Start+0x140>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d111      	bne.n	800434a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b06      	cmp	r3, #6
 8004336:	d010      	beq.n	800435a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004348:	e007      	b.n	800435a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800

08004370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0202 	mvn.w	r2, #2
 800439c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa6f 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa62 	bl	8004884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fa71 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d122      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d11b      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0204 	mvn.w	r2, #4
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fa45 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa38 	bl	8004884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fa47 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b08      	cmp	r3, #8
 800442c:	d122      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d11b      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0208 	mvn.w	r2, #8
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2204      	movs	r2, #4
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa1b 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa0e 	bl	8004884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fa1d 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b10      	cmp	r3, #16
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b10      	cmp	r3, #16
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0210 	mvn.w	r2, #16
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2208      	movs	r2, #8
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f9f1 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f9e4 	bl	8004884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f9f3 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0201 	mvn.w	r2, #1
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fc ff6a 	bl	80013c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fce1 	bl	8004ee2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9b7 	bl	80048ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b20      	cmp	r3, #32
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b20      	cmp	r3, #32
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0220 	mvn.w	r2, #32
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fcac 	bl	8004ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004596:	2302      	movs	r3, #2
 8004598:	e0ac      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	f200 809f 	bhi.w	80046e8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045e5 	.word	0x080045e5
 80045b4:	080046e9 	.word	0x080046e9
 80045b8:	080046e9 	.word	0x080046e9
 80045bc:	080046e9 	.word	0x080046e9
 80045c0:	08004625 	.word	0x08004625
 80045c4:	080046e9 	.word	0x080046e9
 80045c8:	080046e9 	.word	0x080046e9
 80045cc:	080046e9 	.word	0x080046e9
 80045d0:	08004667 	.word	0x08004667
 80045d4:	080046e9 	.word	0x080046e9
 80045d8:	080046e9 	.word	0x080046e9
 80045dc:	080046e9 	.word	0x080046e9
 80045e0:	080046a7 	.word	0x080046a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f9d0 	bl	8004990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0208 	orr.w	r2, r2, #8
 80045fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0204 	bic.w	r2, r2, #4
 800460e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6999      	ldr	r1, [r3, #24]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	619a      	str	r2, [r3, #24]
      break;
 8004622:	e062      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fa16 	bl	8004a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6999      	ldr	r1, [r3, #24]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	021a      	lsls	r2, r3, #8
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	619a      	str	r2, [r3, #24]
      break;
 8004664:	e041      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fa5f 	bl	8004b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0208 	orr.w	r2, r2, #8
 8004680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0204 	bic.w	r2, r2, #4
 8004690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69d9      	ldr	r1, [r3, #28]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	61da      	str	r2, [r3, #28]
      break;
 80046a4:	e021      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 faa9 	bl	8004c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69d9      	ldr	r1, [r3, #28]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	021a      	lsls	r2, r3, #8
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	61da      	str	r2, [r3, #28]
      break;
 80046e6:	e000      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80046e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIM_ConfigClockSource+0x18>
 8004710:	2302      	movs	r3, #2
 8004712:	e0b3      	b.n	800487c <HAL_TIM_ConfigClockSource+0x180>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474c:	d03e      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0xd0>
 800474e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004752:	f200 8087 	bhi.w	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	f000 8085 	beq.w	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	d87f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d01a      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xa2>
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d87b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d050      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x116>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d877      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004774:	2b50      	cmp	r3, #80	; 0x50
 8004776:	d03c      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0xf6>
 8004778:	2b50      	cmp	r3, #80	; 0x50
 800477a:	d873      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d058      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x136>
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d86f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d064      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004788:	2b30      	cmp	r3, #48	; 0x30
 800478a:	d86b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d060      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d867      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d05c      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004798:	2b10      	cmp	r3, #16
 800479a:	d05a      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800479c:	e062      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6899      	ldr	r1, [r3, #8]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f000 faee 	bl	8004d8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	609a      	str	r2, [r3, #8]
      break;
 80047ca:	e04e      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6899      	ldr	r1, [r3, #8]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f000 fad7 	bl	8004d8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ee:	609a      	str	r2, [r3, #8]
      break;
 80047f0:	e03b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	461a      	mov	r2, r3
 8004800:	f000 fa4e 	bl	8004ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2150      	movs	r1, #80	; 0x50
 800480a:	4618      	mov	r0, r3
 800480c:	f000 faa5 	bl	8004d5a <TIM_ITRx_SetConfig>
      break;
 8004810:	e02b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	461a      	mov	r2, r3
 8004820:	f000 fa6c 	bl	8004cfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2160      	movs	r1, #96	; 0x60
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fa95 	bl	8004d5a <TIM_ITRx_SetConfig>
      break;
 8004830:	e01b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	461a      	mov	r2, r3
 8004840:	f000 fa2e 	bl	8004ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fa85 	bl	8004d5a <TIM_ITRx_SetConfig>
      break;
 8004850:	e00b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 fa7c 	bl	8004d5a <TIM_ITRx_SetConfig>
        break;
 8004862:	e002      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004868:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a29      	ldr	r2, [pc, #164]	; (8004984 <TIM_Base_SetConfig+0xb8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00b      	beq.n	80048fc <TIM_Base_SetConfig+0x30>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d007      	beq.n	80048fc <TIM_Base_SetConfig+0x30>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a26      	ldr	r2, [pc, #152]	; (8004988 <TIM_Base_SetConfig+0xbc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_Base_SetConfig+0x30>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a25      	ldr	r2, [pc, #148]	; (800498c <TIM_Base_SetConfig+0xc0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d108      	bne.n	800490e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <TIM_Base_SetConfig+0xb8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00b      	beq.n	800492e <TIM_Base_SetConfig+0x62>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491c:	d007      	beq.n	800492e <TIM_Base_SetConfig+0x62>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a19      	ldr	r2, [pc, #100]	; (8004988 <TIM_Base_SetConfig+0xbc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d003      	beq.n	800492e <TIM_Base_SetConfig+0x62>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a18      	ldr	r2, [pc, #96]	; (800498c <TIM_Base_SetConfig+0xc0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d108      	bne.n	8004940 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a07      	ldr	r2, [pc, #28]	; (8004984 <TIM_Base_SetConfig+0xb8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d103      	bne.n	8004974 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	615a      	str	r2, [r3, #20]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800

08004990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0201 	bic.w	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f023 0302 	bic.w	r3, r3, #2
 80049d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <TIM_OC1_SetConfig+0xc8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d10c      	bne.n	8004a06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0308 	bic.w	r3, r3, #8
 80049f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a13      	ldr	r2, [pc, #76]	; (8004a58 <TIM_OC1_SetConfig+0xc8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d111      	bne.n	8004a32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40012c00 	.word	0x40012c00

08004a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0210 	bic.w	r2, r3, #16
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0320 	bic.w	r3, r3, #32
 8004aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a1d      	ldr	r2, [pc, #116]	; (8004b2c <TIM_OC2_SetConfig+0xd0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d10d      	bne.n	8004ad8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <TIM_OC2_SetConfig+0xd0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d113      	bne.n	8004b08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr
 8004b2c:	40012c00 	.word	0x40012c00

08004b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <TIM_OC3_SetConfig+0xd0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d10d      	bne.n	8004baa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <TIM_OC3_SetConfig+0xd0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d113      	bne.n	8004bda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40012c00 	.word	0x40012c00

08004c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0f      	ldr	r2, [pc, #60]	; (8004c9c <TIM_OC4_SetConfig+0x98>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d109      	bne.n	8004c78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	40012c00 	.word	0x40012c00

08004ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f023 0201 	bic.w	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f023 030a 	bic.w	r3, r3, #10
 8004cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	f023 0210 	bic.w	r2, r3, #16
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	031b      	lsls	r3, r3, #12
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	621a      	str	r2, [r3, #32]
}
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr

08004d5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b085      	sub	sp, #20
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f043 0307 	orr.w	r3, r3, #7
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	609a      	str	r2, [r3, #8]
}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr

08004d8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b087      	sub	sp, #28
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	021a      	lsls	r2, r3, #8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	609a      	str	r2, [r3, #8]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr

08004dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2201      	movs	r2, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	401a      	ands	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1a      	ldr	r2, [r3, #32]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e046      	b.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a16      	ldr	r2, [pc, #88]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00e      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e78:	d009      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800

08004ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <__errno>:
 8004ef4:	4b01      	ldr	r3, [pc, #4]	; (8004efc <__errno+0x8>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	20000010 	.word	0x20000010

08004f00 <__libc_init_array>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	2600      	movs	r6, #0
 8004f04:	4d0c      	ldr	r5, [pc, #48]	; (8004f38 <__libc_init_array+0x38>)
 8004f06:	4c0d      	ldr	r4, [pc, #52]	; (8004f3c <__libc_init_array+0x3c>)
 8004f08:	1b64      	subs	r4, r4, r5
 8004f0a:	10a4      	asrs	r4, r4, #2
 8004f0c:	42a6      	cmp	r6, r4
 8004f0e:	d109      	bne.n	8004f24 <__libc_init_array+0x24>
 8004f10:	f000 fb5c 	bl	80055cc <_init>
 8004f14:	2600      	movs	r6, #0
 8004f16:	4d0a      	ldr	r5, [pc, #40]	; (8004f40 <__libc_init_array+0x40>)
 8004f18:	4c0a      	ldr	r4, [pc, #40]	; (8004f44 <__libc_init_array+0x44>)
 8004f1a:	1b64      	subs	r4, r4, r5
 8004f1c:	10a4      	asrs	r4, r4, #2
 8004f1e:	42a6      	cmp	r6, r4
 8004f20:	d105      	bne.n	8004f2e <__libc_init_array+0x2e>
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f28:	4798      	blx	r3
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	e7ee      	b.n	8004f0c <__libc_init_array+0xc>
 8004f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f32:	4798      	blx	r3
 8004f34:	3601      	adds	r6, #1
 8004f36:	e7f2      	b.n	8004f1e <__libc_init_array+0x1e>
 8004f38:	08005700 	.word	0x08005700
 8004f3c:	08005700 	.word	0x08005700
 8004f40:	08005700 	.word	0x08005700
 8004f44:	08005704 	.word	0x08005704

08004f48 <memset>:
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4402      	add	r2, r0
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d100      	bne.n	8004f52 <memset+0xa>
 8004f50:	4770      	bx	lr
 8004f52:	f803 1b01 	strb.w	r1, [r3], #1
 8004f56:	e7f9      	b.n	8004f4c <memset+0x4>

08004f58 <atan>:
 8004f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	4bb6      	ldr	r3, [pc, #728]	; (8005238 <atan+0x2e0>)
 8004f5e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004f62:	429e      	cmp	r6, r3
 8004f64:	4604      	mov	r4, r0
 8004f66:	460d      	mov	r5, r1
 8004f68:	468b      	mov	fp, r1
 8004f6a:	dd17      	ble.n	8004f9c <atan+0x44>
 8004f6c:	4bb3      	ldr	r3, [pc, #716]	; (800523c <atan+0x2e4>)
 8004f6e:	429e      	cmp	r6, r3
 8004f70:	dc01      	bgt.n	8004f76 <atan+0x1e>
 8004f72:	d109      	bne.n	8004f88 <atan+0x30>
 8004f74:	b140      	cbz	r0, 8004f88 <atan+0x30>
 8004f76:	4622      	mov	r2, r4
 8004f78:	462b      	mov	r3, r5
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	f7fb f8ed 	bl	800015c <__adddf3>
 8004f82:	4604      	mov	r4, r0
 8004f84:	460d      	mov	r5, r1
 8004f86:	e005      	b.n	8004f94 <atan+0x3c>
 8004f88:	f1bb 0f00 	cmp.w	fp, #0
 8004f8c:	4cac      	ldr	r4, [pc, #688]	; (8005240 <atan+0x2e8>)
 8004f8e:	f300 8121 	bgt.w	80051d4 <atan+0x27c>
 8004f92:	4dac      	ldr	r5, [pc, #688]	; (8005244 <atan+0x2ec>)
 8004f94:	4620      	mov	r0, r4
 8004f96:	4629      	mov	r1, r5
 8004f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9c:	4baa      	ldr	r3, [pc, #680]	; (8005248 <atan+0x2f0>)
 8004f9e:	429e      	cmp	r6, r3
 8004fa0:	dc11      	bgt.n	8004fc6 <atan+0x6e>
 8004fa2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004fa6:	429e      	cmp	r6, r3
 8004fa8:	dc0a      	bgt.n	8004fc0 <atan+0x68>
 8004faa:	a38b      	add	r3, pc, #556	; (adr r3, 80051d8 <atan+0x280>)
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f7fb f8d4 	bl	800015c <__adddf3>
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	4ba5      	ldr	r3, [pc, #660]	; (800524c <atan+0x2f4>)
 8004fb8:	f7fb fd16 	bl	80009e8 <__aeabi_dcmpgt>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d1e9      	bne.n	8004f94 <atan+0x3c>
 8004fc0:	f04f 3aff 	mov.w	sl, #4294967295
 8004fc4:	e027      	b.n	8005016 <atan+0xbe>
 8004fc6:	f000 f951 	bl	800526c <fabs>
 8004fca:	4ba1      	ldr	r3, [pc, #644]	; (8005250 <atan+0x2f8>)
 8004fcc:	4604      	mov	r4, r0
 8004fce:	429e      	cmp	r6, r3
 8004fd0:	460d      	mov	r5, r1
 8004fd2:	f300 80b8 	bgt.w	8005146 <atan+0x1ee>
 8004fd6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004fda:	429e      	cmp	r6, r3
 8004fdc:	f300 809c 	bgt.w	8005118 <atan+0x1c0>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	f7fb f8ba 	bl	800015c <__adddf3>
 8004fe8:	2200      	movs	r2, #0
 8004fea:	4b98      	ldr	r3, [pc, #608]	; (800524c <atan+0x2f4>)
 8004fec:	f7fb f8b4 	bl	8000158 <__aeabi_dsub>
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	460f      	mov	r7, r1
 8004ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f7fb f8ad 	bl	800015c <__adddf3>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4630      	mov	r0, r6
 8005008:	4639      	mov	r1, r7
 800500a:	f7fb fb87 	bl	800071c <__aeabi_ddiv>
 800500e:	f04f 0a00 	mov.w	sl, #0
 8005012:	4604      	mov	r4, r0
 8005014:	460d      	mov	r5, r1
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	4620      	mov	r0, r4
 800501c:	4629      	mov	r1, r5
 800501e:	f7fb fa53 	bl	80004c8 <__aeabi_dmul>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4680      	mov	r8, r0
 8005028:	4689      	mov	r9, r1
 800502a:	f7fb fa4d 	bl	80004c8 <__aeabi_dmul>
 800502e:	a36c      	add	r3, pc, #432	; (adr r3, 80051e0 <atan+0x288>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	4606      	mov	r6, r0
 8005036:	460f      	mov	r7, r1
 8005038:	f7fb fa46 	bl	80004c8 <__aeabi_dmul>
 800503c:	a36a      	add	r3, pc, #424	; (adr r3, 80051e8 <atan+0x290>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb f88b 	bl	800015c <__adddf3>
 8005046:	4632      	mov	r2, r6
 8005048:	463b      	mov	r3, r7
 800504a:	f7fb fa3d 	bl	80004c8 <__aeabi_dmul>
 800504e:	a368      	add	r3, pc, #416	; (adr r3, 80051f0 <atan+0x298>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f7fb f882 	bl	800015c <__adddf3>
 8005058:	4632      	mov	r2, r6
 800505a:	463b      	mov	r3, r7
 800505c:	f7fb fa34 	bl	80004c8 <__aeabi_dmul>
 8005060:	a365      	add	r3, pc, #404	; (adr r3, 80051f8 <atan+0x2a0>)
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f7fb f879 	bl	800015c <__adddf3>
 800506a:	4632      	mov	r2, r6
 800506c:	463b      	mov	r3, r7
 800506e:	f7fb fa2b 	bl	80004c8 <__aeabi_dmul>
 8005072:	a363      	add	r3, pc, #396	; (adr r3, 8005200 <atan+0x2a8>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f7fb f870 	bl	800015c <__adddf3>
 800507c:	4632      	mov	r2, r6
 800507e:	463b      	mov	r3, r7
 8005080:	f7fb fa22 	bl	80004c8 <__aeabi_dmul>
 8005084:	a360      	add	r3, pc, #384	; (adr r3, 8005208 <atan+0x2b0>)
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	f7fb f867 	bl	800015c <__adddf3>
 800508e:	4642      	mov	r2, r8
 8005090:	464b      	mov	r3, r9
 8005092:	f7fb fa19 	bl	80004c8 <__aeabi_dmul>
 8005096:	a35e      	add	r3, pc, #376	; (adr r3, 8005210 <atan+0x2b8>)
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	4680      	mov	r8, r0
 800509e:	4689      	mov	r9, r1
 80050a0:	4630      	mov	r0, r6
 80050a2:	4639      	mov	r1, r7
 80050a4:	f7fb fa10 	bl	80004c8 <__aeabi_dmul>
 80050a8:	a35b      	add	r3, pc, #364	; (adr r3, 8005218 <atan+0x2c0>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f7fb f853 	bl	8000158 <__aeabi_dsub>
 80050b2:	4632      	mov	r2, r6
 80050b4:	463b      	mov	r3, r7
 80050b6:	f7fb fa07 	bl	80004c8 <__aeabi_dmul>
 80050ba:	a359      	add	r3, pc, #356	; (adr r3, 8005220 <atan+0x2c8>)
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f7fb f84a 	bl	8000158 <__aeabi_dsub>
 80050c4:	4632      	mov	r2, r6
 80050c6:	463b      	mov	r3, r7
 80050c8:	f7fb f9fe 	bl	80004c8 <__aeabi_dmul>
 80050cc:	a356      	add	r3, pc, #344	; (adr r3, 8005228 <atan+0x2d0>)
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	f7fb f841 	bl	8000158 <__aeabi_dsub>
 80050d6:	4632      	mov	r2, r6
 80050d8:	463b      	mov	r3, r7
 80050da:	f7fb f9f5 	bl	80004c8 <__aeabi_dmul>
 80050de:	a354      	add	r3, pc, #336	; (adr r3, 8005230 <atan+0x2d8>)
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f7fb f838 	bl	8000158 <__aeabi_dsub>
 80050e8:	4632      	mov	r2, r6
 80050ea:	463b      	mov	r3, r7
 80050ec:	f7fb f9ec 	bl	80004c8 <__aeabi_dmul>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4640      	mov	r0, r8
 80050f6:	4649      	mov	r1, r9
 80050f8:	f7fb f830 	bl	800015c <__adddf3>
 80050fc:	4622      	mov	r2, r4
 80050fe:	462b      	mov	r3, r5
 8005100:	f7fb f9e2 	bl	80004c8 <__aeabi_dmul>
 8005104:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	d144      	bne.n	8005198 <atan+0x240>
 800510e:	4620      	mov	r0, r4
 8005110:	4629      	mov	r1, r5
 8005112:	f7fb f821 	bl	8000158 <__aeabi_dsub>
 8005116:	e734      	b.n	8004f82 <atan+0x2a>
 8005118:	2200      	movs	r2, #0
 800511a:	4b4c      	ldr	r3, [pc, #304]	; (800524c <atan+0x2f4>)
 800511c:	f7fb f81c 	bl	8000158 <__aeabi_dsub>
 8005120:	2200      	movs	r2, #0
 8005122:	4606      	mov	r6, r0
 8005124:	460f      	mov	r7, r1
 8005126:	4620      	mov	r0, r4
 8005128:	4629      	mov	r1, r5
 800512a:	4b48      	ldr	r3, [pc, #288]	; (800524c <atan+0x2f4>)
 800512c:	f7fb f816 	bl	800015c <__adddf3>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4630      	mov	r0, r6
 8005136:	4639      	mov	r1, r7
 8005138:	f7fb faf0 	bl	800071c <__aeabi_ddiv>
 800513c:	f04f 0a01 	mov.w	sl, #1
 8005140:	4604      	mov	r4, r0
 8005142:	460d      	mov	r5, r1
 8005144:	e767      	b.n	8005016 <atan+0xbe>
 8005146:	4b43      	ldr	r3, [pc, #268]	; (8005254 <atan+0x2fc>)
 8005148:	429e      	cmp	r6, r3
 800514a:	da1a      	bge.n	8005182 <atan+0x22a>
 800514c:	2200      	movs	r2, #0
 800514e:	4b42      	ldr	r3, [pc, #264]	; (8005258 <atan+0x300>)
 8005150:	f7fb f802 	bl	8000158 <__aeabi_dsub>
 8005154:	2200      	movs	r2, #0
 8005156:	4606      	mov	r6, r0
 8005158:	460f      	mov	r7, r1
 800515a:	4620      	mov	r0, r4
 800515c:	4629      	mov	r1, r5
 800515e:	4b3e      	ldr	r3, [pc, #248]	; (8005258 <atan+0x300>)
 8005160:	f7fb f9b2 	bl	80004c8 <__aeabi_dmul>
 8005164:	2200      	movs	r2, #0
 8005166:	4b39      	ldr	r3, [pc, #228]	; (800524c <atan+0x2f4>)
 8005168:	f7fa fff8 	bl	800015c <__adddf3>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4630      	mov	r0, r6
 8005172:	4639      	mov	r1, r7
 8005174:	f7fb fad2 	bl	800071c <__aeabi_ddiv>
 8005178:	f04f 0a02 	mov.w	sl, #2
 800517c:	4604      	mov	r4, r0
 800517e:	460d      	mov	r5, r1
 8005180:	e749      	b.n	8005016 <atan+0xbe>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	2000      	movs	r0, #0
 8005188:	4934      	ldr	r1, [pc, #208]	; (800525c <atan+0x304>)
 800518a:	f7fb fac7 	bl	800071c <__aeabi_ddiv>
 800518e:	f04f 0a03 	mov.w	sl, #3
 8005192:	4604      	mov	r4, r0
 8005194:	460d      	mov	r5, r1
 8005196:	e73e      	b.n	8005016 <atan+0xbe>
 8005198:	4b31      	ldr	r3, [pc, #196]	; (8005260 <atan+0x308>)
 800519a:	4e32      	ldr	r6, [pc, #200]	; (8005264 <atan+0x30c>)
 800519c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80051a0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80051a4:	e9da 2300 	ldrd	r2, r3, [sl]
 80051a8:	f7fa ffd6 	bl	8000158 <__aeabi_dsub>
 80051ac:	4622      	mov	r2, r4
 80051ae:	462b      	mov	r3, r5
 80051b0:	f7fa ffd2 	bl	8000158 <__aeabi_dsub>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80051bc:	f7fa ffcc 	bl	8000158 <__aeabi_dsub>
 80051c0:	f1bb 0f00 	cmp.w	fp, #0
 80051c4:	4604      	mov	r4, r0
 80051c6:	460d      	mov	r5, r1
 80051c8:	f6bf aee4 	bge.w	8004f94 <atan+0x3c>
 80051cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051d0:	461d      	mov	r5, r3
 80051d2:	e6df      	b.n	8004f94 <atan+0x3c>
 80051d4:	4d24      	ldr	r5, [pc, #144]	; (8005268 <atan+0x310>)
 80051d6:	e6dd      	b.n	8004f94 <atan+0x3c>
 80051d8:	8800759c 	.word	0x8800759c
 80051dc:	7e37e43c 	.word	0x7e37e43c
 80051e0:	e322da11 	.word	0xe322da11
 80051e4:	3f90ad3a 	.word	0x3f90ad3a
 80051e8:	24760deb 	.word	0x24760deb
 80051ec:	3fa97b4b 	.word	0x3fa97b4b
 80051f0:	a0d03d51 	.word	0xa0d03d51
 80051f4:	3fb10d66 	.word	0x3fb10d66
 80051f8:	c54c206e 	.word	0xc54c206e
 80051fc:	3fb745cd 	.word	0x3fb745cd
 8005200:	920083ff 	.word	0x920083ff
 8005204:	3fc24924 	.word	0x3fc24924
 8005208:	5555550d 	.word	0x5555550d
 800520c:	3fd55555 	.word	0x3fd55555
 8005210:	2c6a6c2f 	.word	0x2c6a6c2f
 8005214:	bfa2b444 	.word	0xbfa2b444
 8005218:	52defd9a 	.word	0x52defd9a
 800521c:	3fadde2d 	.word	0x3fadde2d
 8005220:	af749a6d 	.word	0xaf749a6d
 8005224:	3fb3b0f2 	.word	0x3fb3b0f2
 8005228:	fe231671 	.word	0xfe231671
 800522c:	3fbc71c6 	.word	0x3fbc71c6
 8005230:	9998ebc4 	.word	0x9998ebc4
 8005234:	3fc99999 	.word	0x3fc99999
 8005238:	440fffff 	.word	0x440fffff
 800523c:	7ff00000 	.word	0x7ff00000
 8005240:	54442d18 	.word	0x54442d18
 8005244:	bff921fb 	.word	0xbff921fb
 8005248:	3fdbffff 	.word	0x3fdbffff
 800524c:	3ff00000 	.word	0x3ff00000
 8005250:	3ff2ffff 	.word	0x3ff2ffff
 8005254:	40038000 	.word	0x40038000
 8005258:	3ff80000 	.word	0x3ff80000
 800525c:	bff00000 	.word	0xbff00000
 8005260:	080056b0 	.word	0x080056b0
 8005264:	08005690 	.word	0x08005690
 8005268:	3ff921fb 	.word	0x3ff921fb

0800526c <fabs>:
 800526c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005270:	4770      	bx	lr

08005272 <atan2>:
 8005272:	f000 b82d 	b.w	80052d0 <__ieee754_atan2>
	...

08005278 <sqrt>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	4606      	mov	r6, r0
 800527c:	460f      	mov	r7, r1
 800527e:	f000 f8f9 	bl	8005474 <__ieee754_sqrt>
 8005282:	4b12      	ldr	r3, [pc, #72]	; (80052cc <sqrt+0x54>)
 8005284:	4604      	mov	r4, r0
 8005286:	f993 3000 	ldrsb.w	r3, [r3]
 800528a:	460d      	mov	r5, r1
 800528c:	3301      	adds	r3, #1
 800528e:	d019      	beq.n	80052c4 <sqrt+0x4c>
 8005290:	4632      	mov	r2, r6
 8005292:	463b      	mov	r3, r7
 8005294:	4630      	mov	r0, r6
 8005296:	4639      	mov	r1, r7
 8005298:	f7fb fbb0 	bl	80009fc <__aeabi_dcmpun>
 800529c:	b990      	cbnz	r0, 80052c4 <sqrt+0x4c>
 800529e:	2200      	movs	r2, #0
 80052a0:	2300      	movs	r3, #0
 80052a2:	4630      	mov	r0, r6
 80052a4:	4639      	mov	r1, r7
 80052a6:	f7fb fb81 	bl	80009ac <__aeabi_dcmplt>
 80052aa:	b158      	cbz	r0, 80052c4 <sqrt+0x4c>
 80052ac:	f7ff fe22 	bl	8004ef4 <__errno>
 80052b0:	2321      	movs	r3, #33	; 0x21
 80052b2:	2200      	movs	r2, #0
 80052b4:	6003      	str	r3, [r0, #0]
 80052b6:	2300      	movs	r3, #0
 80052b8:	4610      	mov	r0, r2
 80052ba:	4619      	mov	r1, r3
 80052bc:	f7fb fa2e 	bl	800071c <__aeabi_ddiv>
 80052c0:	4604      	mov	r4, r0
 80052c2:	460d      	mov	r5, r1
 80052c4:	4620      	mov	r0, r4
 80052c6:	4629      	mov	r1, r5
 80052c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000074 	.word	0x20000074

080052d0 <__ieee754_atan2>:
 80052d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	4692      	mov	sl, r2
 80052d6:	4699      	mov	r9, r3
 80052d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052dc:	461f      	mov	r7, r3
 80052de:	f1ca 0300 	rsb	r3, sl, #0
 80052e2:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8005470 <__ieee754_atan2+0x1a0>
 80052e6:	ea43 030a 	orr.w	r3, r3, sl
 80052ea:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80052ee:	4573      	cmp	r3, lr
 80052f0:	4604      	mov	r4, r0
 80052f2:	460d      	mov	r5, r1
 80052f4:	d808      	bhi.n	8005308 <__ieee754_atan2+0x38>
 80052f6:	4246      	negs	r6, r0
 80052f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80052fc:	4306      	orrs	r6, r0
 80052fe:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8005302:	4576      	cmp	r6, lr
 8005304:	468c      	mov	ip, r1
 8005306:	d908      	bls.n	800531a <__ieee754_atan2+0x4a>
 8005308:	4652      	mov	r2, sl
 800530a:	464b      	mov	r3, r9
 800530c:	4620      	mov	r0, r4
 800530e:	4629      	mov	r1, r5
 8005310:	f7fa ff24 	bl	800015c <__adddf3>
 8005314:	4604      	mov	r4, r0
 8005316:	460d      	mov	r5, r1
 8005318:	e019      	b.n	800534e <__ieee754_atan2+0x7e>
 800531a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800531e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8005322:	ea56 060a 	orrs.w	r6, r6, sl
 8005326:	d103      	bne.n	8005330 <__ieee754_atan2+0x60>
 8005328:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532c:	f7ff be14 	b.w	8004f58 <atan>
 8005330:	17be      	asrs	r6, r7, #30
 8005332:	f006 0602 	and.w	r6, r6, #2
 8005336:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800533a:	ea53 0100 	orrs.w	r1, r3, r0
 800533e:	d10a      	bne.n	8005356 <__ieee754_atan2+0x86>
 8005340:	2e02      	cmp	r6, #2
 8005342:	d067      	beq.n	8005414 <__ieee754_atan2+0x144>
 8005344:	2e03      	cmp	r6, #3
 8005346:	d102      	bne.n	800534e <__ieee754_atan2+0x7e>
 8005348:	a53b      	add	r5, pc, #236	; (adr r5, 8005438 <__ieee754_atan2+0x168>)
 800534a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800534e:	4620      	mov	r0, r4
 8005350:	4629      	mov	r1, r5
 8005352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005356:	ea52 010a 	orrs.w	r1, r2, sl
 800535a:	d106      	bne.n	800536a <__ieee754_atan2+0x9a>
 800535c:	f1bc 0f00 	cmp.w	ip, #0
 8005360:	da63      	bge.n	800542a <__ieee754_atan2+0x15a>
 8005362:	a537      	add	r5, pc, #220	; (adr r5, 8005440 <__ieee754_atan2+0x170>)
 8005364:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005368:	e7f1      	b.n	800534e <__ieee754_atan2+0x7e>
 800536a:	4572      	cmp	r2, lr
 800536c:	d10f      	bne.n	800538e <__ieee754_atan2+0xbe>
 800536e:	4293      	cmp	r3, r2
 8005370:	f106 36ff 	add.w	r6, r6, #4294967295
 8005374:	d107      	bne.n	8005386 <__ieee754_atan2+0xb6>
 8005376:	2e02      	cmp	r6, #2
 8005378:	d850      	bhi.n	800541c <__ieee754_atan2+0x14c>
 800537a:	4b3b      	ldr	r3, [pc, #236]	; (8005468 <__ieee754_atan2+0x198>)
 800537c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005380:	e9d6 4500 	ldrd	r4, r5, [r6]
 8005384:	e7e3      	b.n	800534e <__ieee754_atan2+0x7e>
 8005386:	2e02      	cmp	r6, #2
 8005388:	d84c      	bhi.n	8005424 <__ieee754_atan2+0x154>
 800538a:	4b38      	ldr	r3, [pc, #224]	; (800546c <__ieee754_atan2+0x19c>)
 800538c:	e7f6      	b.n	800537c <__ieee754_atan2+0xac>
 800538e:	4573      	cmp	r3, lr
 8005390:	d0e4      	beq.n	800535c <__ieee754_atan2+0x8c>
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005398:	ea4f 5223 	mov.w	r2, r3, asr #20
 800539c:	da20      	bge.n	80053e0 <__ieee754_atan2+0x110>
 800539e:	2f00      	cmp	r7, #0
 80053a0:	da01      	bge.n	80053a6 <__ieee754_atan2+0xd6>
 80053a2:	323c      	adds	r2, #60	; 0x3c
 80053a4:	db20      	blt.n	80053e8 <__ieee754_atan2+0x118>
 80053a6:	4652      	mov	r2, sl
 80053a8:	464b      	mov	r3, r9
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fb f9b5 	bl	800071c <__aeabi_ddiv>
 80053b2:	f7ff ff5b 	bl	800526c <fabs>
 80053b6:	f7ff fdcf 	bl	8004f58 <atan>
 80053ba:	4604      	mov	r4, r0
 80053bc:	460d      	mov	r5, r1
 80053be:	2e01      	cmp	r6, #1
 80053c0:	d015      	beq.n	80053ee <__ieee754_atan2+0x11e>
 80053c2:	2e02      	cmp	r6, #2
 80053c4:	d017      	beq.n	80053f6 <__ieee754_atan2+0x126>
 80053c6:	2e00      	cmp	r6, #0
 80053c8:	d0c1      	beq.n	800534e <__ieee754_atan2+0x7e>
 80053ca:	a31f      	add	r3, pc, #124	; (adr r3, 8005448 <__ieee754_atan2+0x178>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	4620      	mov	r0, r4
 80053d2:	4629      	mov	r1, r5
 80053d4:	f7fa fec0 	bl	8000158 <__aeabi_dsub>
 80053d8:	a31d      	add	r3, pc, #116	; (adr r3, 8005450 <__ieee754_atan2+0x180>)
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	e016      	b.n	800540e <__ieee754_atan2+0x13e>
 80053e0:	a51d      	add	r5, pc, #116	; (adr r5, 8005458 <__ieee754_atan2+0x188>)
 80053e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80053e6:	e7ea      	b.n	80053be <__ieee754_atan2+0xee>
 80053e8:	2400      	movs	r4, #0
 80053ea:	2500      	movs	r5, #0
 80053ec:	e7e7      	b.n	80053be <__ieee754_atan2+0xee>
 80053ee:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80053f2:	461d      	mov	r5, r3
 80053f4:	e7ab      	b.n	800534e <__ieee754_atan2+0x7e>
 80053f6:	a314      	add	r3, pc, #80	; (adr r3, 8005448 <__ieee754_atan2+0x178>)
 80053f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fc:	4620      	mov	r0, r4
 80053fe:	4629      	mov	r1, r5
 8005400:	f7fa feaa 	bl	8000158 <__aeabi_dsub>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	a111      	add	r1, pc, #68	; (adr r1, 8005450 <__ieee754_atan2+0x180>)
 800540a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800540e:	f7fa fea3 	bl	8000158 <__aeabi_dsub>
 8005412:	e77f      	b.n	8005314 <__ieee754_atan2+0x44>
 8005414:	a50e      	add	r5, pc, #56	; (adr r5, 8005450 <__ieee754_atan2+0x180>)
 8005416:	e9d5 4500 	ldrd	r4, r5, [r5]
 800541a:	e798      	b.n	800534e <__ieee754_atan2+0x7e>
 800541c:	a510      	add	r5, pc, #64	; (adr r5, 8005460 <__ieee754_atan2+0x190>)
 800541e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005422:	e794      	b.n	800534e <__ieee754_atan2+0x7e>
 8005424:	2400      	movs	r4, #0
 8005426:	2500      	movs	r5, #0
 8005428:	e791      	b.n	800534e <__ieee754_atan2+0x7e>
 800542a:	a50b      	add	r5, pc, #44	; (adr r5, 8005458 <__ieee754_atan2+0x188>)
 800542c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005430:	e78d      	b.n	800534e <__ieee754_atan2+0x7e>
 8005432:	bf00      	nop
 8005434:	f3af 8000 	nop.w
 8005438:	54442d18 	.word	0x54442d18
 800543c:	c00921fb 	.word	0xc00921fb
 8005440:	54442d18 	.word	0x54442d18
 8005444:	bff921fb 	.word	0xbff921fb
 8005448:	33145c07 	.word	0x33145c07
 800544c:	3ca1a626 	.word	0x3ca1a626
 8005450:	54442d18 	.word	0x54442d18
 8005454:	400921fb 	.word	0x400921fb
 8005458:	54442d18 	.word	0x54442d18
 800545c:	3ff921fb 	.word	0x3ff921fb
 8005460:	54442d18 	.word	0x54442d18
 8005464:	3fe921fb 	.word	0x3fe921fb
 8005468:	080056d0 	.word	0x080056d0
 800546c:	080056e8 	.word	0x080056e8
 8005470:	7ff00000 	.word	0x7ff00000

08005474 <__ieee754_sqrt>:
 8005474:	f8df c150 	ldr.w	ip, [pc, #336]	; 80055c8 <__ieee754_sqrt+0x154>
 8005478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547c:	ea3c 0c01 	bics.w	ip, ip, r1
 8005480:	460b      	mov	r3, r1
 8005482:	4606      	mov	r6, r0
 8005484:	460d      	mov	r5, r1
 8005486:	460a      	mov	r2, r1
 8005488:	4607      	mov	r7, r0
 800548a:	4604      	mov	r4, r0
 800548c:	d10e      	bne.n	80054ac <__ieee754_sqrt+0x38>
 800548e:	4602      	mov	r2, r0
 8005490:	f7fb f81a 	bl	80004c8 <__aeabi_dmul>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4630      	mov	r0, r6
 800549a:	4629      	mov	r1, r5
 800549c:	f7fa fe5e 	bl	800015c <__adddf3>
 80054a0:	4606      	mov	r6, r0
 80054a2:	460d      	mov	r5, r1
 80054a4:	4630      	mov	r0, r6
 80054a6:	4629      	mov	r1, r5
 80054a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ac:	2900      	cmp	r1, #0
 80054ae:	dc0d      	bgt.n	80054cc <__ieee754_sqrt+0x58>
 80054b0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80054b4:	ea5c 0707 	orrs.w	r7, ip, r7
 80054b8:	d0f4      	beq.n	80054a4 <__ieee754_sqrt+0x30>
 80054ba:	b139      	cbz	r1, 80054cc <__ieee754_sqrt+0x58>
 80054bc:	4602      	mov	r2, r0
 80054be:	f7fa fe4b 	bl	8000158 <__aeabi_dsub>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	f7fb f929 	bl	800071c <__aeabi_ddiv>
 80054ca:	e7e9      	b.n	80054a0 <__ieee754_sqrt+0x2c>
 80054cc:	1512      	asrs	r2, r2, #20
 80054ce:	d074      	beq.n	80055ba <__ieee754_sqrt+0x146>
 80054d0:	2000      	movs	r0, #0
 80054d2:	07d5      	lsls	r5, r2, #31
 80054d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054d8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80054dc:	bf5e      	ittt	pl
 80054de:	0fe3      	lsrpl	r3, r4, #31
 80054e0:	0064      	lslpl	r4, r4, #1
 80054e2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80054e6:	0fe3      	lsrs	r3, r4, #31
 80054e8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80054ec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80054f0:	2516      	movs	r5, #22
 80054f2:	4601      	mov	r1, r0
 80054f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80054f8:	1076      	asrs	r6, r6, #1
 80054fa:	0064      	lsls	r4, r4, #1
 80054fc:	188f      	adds	r7, r1, r2
 80054fe:	429f      	cmp	r7, r3
 8005500:	bfde      	ittt	le
 8005502:	1bdb      	suble	r3, r3, r7
 8005504:	18b9      	addle	r1, r7, r2
 8005506:	1880      	addle	r0, r0, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	3d01      	subs	r5, #1
 800550c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005510:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005514:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005518:	d1f0      	bne.n	80054fc <__ieee754_sqrt+0x88>
 800551a:	462a      	mov	r2, r5
 800551c:	f04f 0e20 	mov.w	lr, #32
 8005520:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8005524:	428b      	cmp	r3, r1
 8005526:	eb07 0c05 	add.w	ip, r7, r5
 800552a:	dc02      	bgt.n	8005532 <__ieee754_sqrt+0xbe>
 800552c:	d113      	bne.n	8005556 <__ieee754_sqrt+0xe2>
 800552e:	45a4      	cmp	ip, r4
 8005530:	d811      	bhi.n	8005556 <__ieee754_sqrt+0xe2>
 8005532:	f1bc 0f00 	cmp.w	ip, #0
 8005536:	eb0c 0507 	add.w	r5, ip, r7
 800553a:	da43      	bge.n	80055c4 <__ieee754_sqrt+0x150>
 800553c:	2d00      	cmp	r5, #0
 800553e:	db41      	blt.n	80055c4 <__ieee754_sqrt+0x150>
 8005540:	f101 0801 	add.w	r8, r1, #1
 8005544:	1a5b      	subs	r3, r3, r1
 8005546:	4641      	mov	r1, r8
 8005548:	45a4      	cmp	ip, r4
 800554a:	bf88      	it	hi
 800554c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005550:	eba4 040c 	sub.w	r4, r4, ip
 8005554:	443a      	add	r2, r7
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	f1be 0e01 	subs.w	lr, lr, #1
 800555c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005560:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8005564:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005568:	d1dc      	bne.n	8005524 <__ieee754_sqrt+0xb0>
 800556a:	4323      	orrs	r3, r4
 800556c:	d006      	beq.n	800557c <__ieee754_sqrt+0x108>
 800556e:	1c54      	adds	r4, r2, #1
 8005570:	bf0b      	itete	eq
 8005572:	4672      	moveq	r2, lr
 8005574:	3201      	addne	r2, #1
 8005576:	3001      	addeq	r0, #1
 8005578:	f022 0201 	bicne.w	r2, r2, #1
 800557c:	1043      	asrs	r3, r0, #1
 800557e:	07c1      	lsls	r1, r0, #31
 8005580:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005584:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005588:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800558c:	bf48      	it	mi
 800558e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005592:	4610      	mov	r0, r2
 8005594:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005598:	e782      	b.n	80054a0 <__ieee754_sqrt+0x2c>
 800559a:	0ae3      	lsrs	r3, r4, #11
 800559c:	3915      	subs	r1, #21
 800559e:	0564      	lsls	r4, r4, #21
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0fa      	beq.n	800559a <__ieee754_sqrt+0x126>
 80055a4:	02de      	lsls	r6, r3, #11
 80055a6:	d50a      	bpl.n	80055be <__ieee754_sqrt+0x14a>
 80055a8:	f1c2 0020 	rsb	r0, r2, #32
 80055ac:	fa24 f000 	lsr.w	r0, r4, r0
 80055b0:	1e55      	subs	r5, r2, #1
 80055b2:	4094      	lsls	r4, r2
 80055b4:	4303      	orrs	r3, r0
 80055b6:	1b4a      	subs	r2, r1, r5
 80055b8:	e78a      	b.n	80054d0 <__ieee754_sqrt+0x5c>
 80055ba:	4611      	mov	r1, r2
 80055bc:	e7f0      	b.n	80055a0 <__ieee754_sqrt+0x12c>
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	3201      	adds	r2, #1
 80055c2:	e7ef      	b.n	80055a4 <__ieee754_sqrt+0x130>
 80055c4:	4688      	mov	r8, r1
 80055c6:	e7bd      	b.n	8005544 <__ieee754_sqrt+0xd0>
 80055c8:	7ff00000 	.word	0x7ff00000

080055cc <_init>:
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	bf00      	nop
 80055d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d2:	bc08      	pop	{r3}
 80055d4:	469e      	mov	lr, r3
 80055d6:	4770      	bx	lr

080055d8 <_fini>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr
